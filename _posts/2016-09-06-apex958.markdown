---
layout: post
title: Announcing Apache Apex Malhar 3.5.0 Release
date: '2016-09-06T22:03:32+00:00'
categories: apex
---
<p>The Apache Apex community is pleased to announce release 3.5.0 of the Malhar library.</p>

<p>The release resolved 63 JIRAs and comes with exciting new features and enhancements, including:</p>

<ul>
<li><p>Windowed Operator that supports the windowing semantics outlined by Apache Beam and Google Cloud DataFlow, including the concepts of event time windows, session windows, watermarks, allowed lateness, and triggering. As of this release, the <a href="https://github.com/apache/apex-malhar/blob/master/docs/operators/windowedOperator.md">Windowed Operator</a> manages its state in memory that is checkpointed to DFS, and work is underway to make the state management scalable.</p></li>
<li><p>High level Java stream API now uses the aforementioned Windowed Operator to support stateful transformation with Apache Beam style windowing semantics. The <a href="https://github.com/apache/apex-malhar/tree/v3.5.0/demos/highlevelapi">demo package</a> has examples for usage of the API and more info in this <a href="http://www.slideshare.net/ApacheApex/java-high-level-stream-api">presentation</a>.</p></li>
<li><p>Introduction of Spillable Data Structures that make use of Managed State. This is an abstraction layer over Managed State that provides ease of use to state management components in custom operators and incremental state saving. Work is underway to take this further in the next release, along with benchmarking for key cardinality and throughput, and to be used by the Windowed Operator for managing large state.</p></li>
<li><p>Deduper solves a frequent task in processing stream data, to decide whether a given record is a duplicate or not. The <a href="http://apex.apache.org/docs/malhar/operators/deduper/">documentation</a> explains this in detail. </p></li>
<li><p>JDBC poll operator, another operator frequently required in Apex use cases. The operator can function as bounded or unbounded source, is idempotent for exactly-once processing and partitionable. An example can be found <a href="https://github.com/DataTorrent/examples/tree/master/tutorials/jdbcIngest">here</a>.</p></li>
<li><p>Enricher that essentially joins a stream with a lookup source and can operate on any POJO object. The user can solve this through configuration and does not need to write code for the operator. See <a href="http://apex.apache.org/docs/malhar/operators/enricher/">documentation</a> which has an example linked.</p></li>
</ul>

<p>There are more features, enhancements and fixes is this release, see <a href="https://s.apache.org/5vQi">https://s.apache.org/5vQi</a> for full changes.</p>

<p>Apache Apex is an enterprise grade native YARN big data-in-motion platform that unifies stream and batch processing. Apex was built for scalability and low-latency processing, high availability and operability. </p>

<p>Apex provides unique features that similar platforms currently don't offer, such as fine grained, incremental recovery to only reset the portion of a topology that is affected by a failure, support for elastic scaling based on the ability to acquire (and release) resources as needed as well as the ability to alter topology and operator properties on running applications.</p>

<p>Apex has been developed since 2012 and <a href="https://blogs.apache.org/foundation/entry/the_apache_software_foundation_announces90">became ASF top level project</a> earlier this year, following 8 months of incubation. Apex early on brought the combination of high throughput, low latency and fault tolerance with strong processing guarantees to the stream data processing space and gained maturity through important production use cases at several organizations. See the <a href="http://apex.apache.org/powered-by-apex.html">powered by page</a> and <a href="http://apex.apache.org/docs.html">resources</a> on the project web site for more information.</p>

<p>The Apex engine is supplemented by Malhar, the library of pre-built operators, including adapters that integrate with many existing technologies as sources and destinations, like message buses, databases, files or social media feeds. </p>

<p>An easy way to get started with Apex is to pick one of the <a href="https://github.com/DataTorrent/examples/tree/master/tutorials">examples</a> as starting point. They cover many common and recurring tasks, such as data consumption from different sources, output to various sinks, partitioning and fault tolerance.</p>

<p>Apex Malhar and Core (the engine) are separate repositories and releases. We expect more frequent releases of Malhar to roll out new connectors and other operators based on a stable engine API. This release 3.5.0 works on existing Apex Core 3.4 installations. Users only need to upgrade the Maven dependency in their project.</p>

<p>The source release can be found at:</p>

<p><a href="http://apex.apache.org/downloads.html">http://apex.apache.org/downloads.html</a></p>

<p>We welcome your help and feedback. For more information on the project and how to get involved, visit our website at:</p>

<p><a href="http://apex.apache.org/">http://apex.apache.org/</a></p>
