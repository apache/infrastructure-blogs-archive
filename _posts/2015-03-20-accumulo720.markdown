---
layout: post
title: Balancing Groups of Tablets
date: '2015-03-20T15:24:48+00:00'
categories: accumulo
---
<p>This post was moved <a href="https://accumulo.apache.org/blog/2015/03/20/balancing-groups-of-tablets.html" title="Updated location">to the Accumulo project site</a>. <br /></p> 
  <p>Accumulo has a pluggable tablet balancer that decides where tablets should be placed.&nbsp; Accumulo's default configuration spreads each tables tablets evenly and randomly across the tablet servers.&nbsp; Each table can configure a custom balancer that does something different.</p> 
  <p>For some applications to perform optimally, sub-ranges of a table need to be spread evenly across the cluster.&nbsp; Over the years I have run into multiple use cases for this situation.&nbsp; The latest use case was <a href="https://github.com/fluo-io/fluo/issues/361">bad performance</a> on the <a href="http://fluo.io">Fluo</a> <a href="https://github.com/fluo-io/fluo-stress">Stress Test</a>.&nbsp; This test stores a tree in an Accumulo table and creates multiple tablets for each level in the tree.&nbsp; In parallel, the test reads data from one level and writes it up to the next level.&nbsp; Figure 1 below shows an example of tablet servers hosting tablets for different levels of the tree.&nbsp; Under this scenario if many threads are reading data from level 2 and writing up to level 1, only Tserver 1 and Tserver 2 will be utilized.&nbsp; So in this scenario 50% of the tablet servers are idle.</p> 
  <div align="center"> 
    <p><a href="https://blogs.apache.org/accumulo/mediaresource/265a0395-e163-4123-a753-a5d264d84f3f"><img alt="Figure 1" src="https://blogs.apache.org/accumulo/mediaresource/265a0395-e163-4123-a753-a5d264d84f3f" /></a></p> 
    <p><em>Figure 1</em><br /></p> 
  </div> 
  <p><a href="https://issues.apache.org/jira/browse/ACCUMULO-3439">ACCUMULO-3439</a> remedied this situation with the introduction of the<a href="https://git-wip-us.apache.org/repos/asf?p=accumulo.git;a=blob;f=server/base/src/main/java/org/apache/accumulo/server/master/balancer/GroupBalancer.java;hb=b0815affade66ab04ca27b6fc3abaac400097469"> GroupBalancer</a> and <a href="https://git-wip-us.apache.org/repos/asf?p=accumulo.git;a=blob;f=server/base/src/main/java/org/apache/accumulo/server/master/balancer/RegexGroupBalancer.java;hb=51fbfaf0a52dc89e8294c86c30164fb94c9f644c">RegexGroupBalancer</a> which will be available in Accumulo 1.7.0.&nbsp; These balancers allow a user to arbitrarily group tablets.&nbsp; Each group defined by the user will be evenly spread across the tablet servers.&nbsp; Also, the total number of groups on each tablet server is minimized.&nbsp;&nbsp; As tablets are added or removed from the table, the balancer will migrate tablets to satisfy these goals.&nbsp; Much of the complexity in the GroupBalancer code comes from trying to minimize the number of migrations needed to reach a good state.</p> 
  <p>A GroupBalancer could be configured for the table in figure 1 in such a way that it grouped tablets by level.&nbsp; If this were done, the result may look like Figure 2 below.&nbsp; With this tablet to tablet server mapping, many threads reading from level 2 and writing data up to level 1 would utilize all of the tablet servers yielding better performance. <br /></p> 
  <p align="center"><a href="https://blogs.apache.org/accumulo/mediaresource/dbf9933e-efa3-428a-857e-96d2a28de4d5"><img src="https://blogs.apache.org/accumulo/mediaresource/dbf9933e-efa3-428a-857e-96d2a28de4d5" alt="Figure 2" /></a></p> 
  <p align="center"><em>Figure 2</em><br /></p> 
  <p><a href="https://git-wip-us.apache.org/repos/asf?p=accumulo.git;a=blob;f=docs/src/main/resources/examples/README.rgbalancer;hb=51fbfaf0a52dc89e8294c86c30164fb94c9f644c">README.rgbalancer</a> provides a good example of configuring and using the RegexGroupBalancer.&nbsp; If a regular expression can not accomplish the needed grouping, then a grouping function can be written in Java.&nbsp; Extend GroupBalancer to write a grouping function in java.&nbsp; RegexGroupBalancer provides a good example of how to do this.</p> 
  <p>When using a GroupBalancer, how Accumulo automatically splits tablets must be kept in mind.&nbsp; When Accumulo decides to split a tablet, it chooses the shortest possible row prefix from the tablet data that yields a good split point. Therefore its possible that a split point that is shorter than what is expected by a GroupBalancer could be chosen.&nbsp; The best way to avoid this situation is to pre-split the table such that it precludes this possibility.<br /><br />The Fluo Stress test is a very abstract use case.&nbsp; A more concrete use case for the group balancer would be using it to ensure tablets storing geographic data were spread out evenly.&nbsp; For example consider <a href="https://ngageoint.github.io/geowave/">GeoWave's</a> Accumulo<a href="http://ngageoint.github.io/geowave/documentation.html#architecture-accumulo"> Persistence Model</a>.&nbsp; Tablets could be balanced such that bins related to different regions are spread out evenly.&nbsp; For example tablets related to each continent could be assigned a group ensuring data related to each continent is evenly spread across the cluster.&nbsp; Alternatively, each Tier could spread evenly across the cluster.&nbsp;&nbsp; <br /></p><a href="ttps://git-wip-us.apache.org/repos/asf?p=accumulo.git;&lt;span%20id="></a>
