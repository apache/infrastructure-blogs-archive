---
layout: post
title: 'Moving on to Log4j 2: Log4j 1.2 is broken on Java 9'
date: '2016-07-17T15:35:01+00:00'
categories: logging
---
Log4j 1 has had a good run. First released in 1999, it is still widely used in a variety of Java-based projects. With Java 9, that is likely to come to an end: <a href="http://mail.openjdk.java.net/pipermail/jigsaw-dev/2016-July/008654.html">Log4j 1.2 is broken on Java 9</a>. Essentially the MDC depends on the Java version string, which does not play well with Java 9's <a href="http://openjdk.java.net/jeps/223">new version-string format</a>.
<p>
The Apache Logging PMC announced in August 2015 that <a href="https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces">Log4j 1 reached End Of Life</a> and there would be no further releases. The announcement encouraged users to upgrade to its successor, Log4j 2. 
<p>
What does this mean, concretely? Most of Log4j 1.2 will still work on Java 9. The issue described above is with the MDC (what is now called the ThreadContext map). If you don't use the MDC you may not be impacted, and even if you are impacted <a href="https://github.com/elastic/elasticsearch/blob/f01f15d3b8592db4210f725f0c37baff4a554a35/core/src/main/java/org/apache/log4j/Java9Hack.java">this workaround</a> may help.
<p>
What has changed is that doing nothing is no longer the safest option. You could endeavor to continue using Log4j 1.2 even on Java 9, but why would you?
<p>
<a href="https://blogs.apache.org/logging/mediaresource/d63866c6-8ac3-44bb-bfe1-53eb21265991"><img src="https://blogs.apache.org/logging/mediaresource/d63866c6-8ac3-44bb-bfe1-53eb21265991?t=true" alt="logo-2.6.2.png"></img></a>
<p>
If you're not using Log4j 2, this is what you're missing out on:
<p>
<ul>
<li>Improved reliability. Messages are not lost while reconfiguring the framework like in Log4j 1 or Logback</li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/extending.html">Extensibility</a>: Log4j 2 supports a <a href="https://logging.apache.org/log4j/2.x/manual/plugins.html">plugin system</a> to let users define and configure custom components</li>
<li>Simplified <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">configuration syntax</a>, with support for xml, json, yaml and properties configurations</li>
<li>Improved <a href="https://logging.apache.org/log4j/2.x/manual/filters.html">Filters</a> which can be defined globally or on any configuration element to give you fine-grained control over which log messages should be processed by which Loggers and Appenders.</li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Property lookup</a> support for values defined in arbitrary places including, but not limited to, the configuration file, system properties, environment variables, the application container, the ThreadContext Map, and other attributes of the log event</li>
<li>Support for multiple APIs: Log4j 2 can be used with applications using the Log4j 2, Log4j 1.2, SLF4J, Commons Logging and java.util.logging (JUL) APIs</li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/customloglevels.html">Custom Log Levels</a></li>
<li>Java 8-style <a href="https://logging.apache.org/log4j/2.x/manual/api.html#LambdaSupport">lambda support</a> for "lazy logging"</li>
<li><a href="https://logging.apache.org/log4j/2.x/manual/markers.html">Markers</a></li>
<li>Support for user-defined <a href="https://logging.apache.org/log4j/2.x/manual/messages.html">Message</a> objects</li>
<li>"<a href="https://logging.apache.org/log4j/2.x/manual/garbagefree.html">Garbage-free or low garbage</a>" in common configurations</li>
<li><a href="https://logging.apache.org/log4j/2.x/performance.html">Improved speed overall</a>. Worth mentioning especially is the performance of the <a href="https://logging.apache.org/log4j/2.x/manual/async.html">Asynchronous Loggers</a>. Log4j 2 makes use of the <a href="http://lmax-exchange.github.io/disruptor/">LMAX Disruptor</a>. The library reduces the need for kernel locking and increases the logging performance by a factor 12. For example, in the same environment Log4j 2 can write more than 18,000,000 messages per second, whereas other frameworks like Logback and Log4j 1 just write up to 2,000,000 messages per second.</li>
</ul>

<p>
Log4j 2 has an active and enthusiastic community who would be happy to help out with any migration issues that may come up.
<p>
To any project that is interested in running on Java 9, I'd strongly recommend migrating to Log4j 2 now. 
