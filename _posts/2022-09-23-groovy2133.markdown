---
layout: post
title: Deck of cards with Groovy, JDK collections and Eclipse Collections
date: '2022-09-23T10:18:36+00:00'
categories: groovy
---
<p>Once again, <a href="https://twitter.com/TheDonRaab" target="_blank">Donald Raab</a> has produced an interesting <a href="https://donraab.medium.com/how-to-create-a-deck-of-cards-using-eclipse-collections-d9838ac430b7" target="_blank">blog post</a> on <a href="https://github.com/eclipse/eclipse-collections" target="_blank">Eclipse Collections</a>;&nbsp;this one shows some code for modelling and manipulating cards with Java 17 and Eclipse Collections. His related katas are highly recommended.</p><p>Here is the same example in Groovy (4.0.5 was used here) with just a few tweaks:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">enum </span>Rank { <span style="color:#9876aa;font-style:italic;">ACE</span>, <span style="color:#9876aa;font-style:italic;">TWO</span>, <span style="color:#9876aa;font-style:italic;">THREE</span>, <span style="color:#9876aa;font-style:italic;">FOUR</span>, <span style="color:#9876aa;font-style:italic;">FIVE</span>, <span style="color:#9876aa;font-style:italic;">SIX</span>, <span style="color:#9876aa;font-style:italic;">SEVEN</span>, <span style="color:#9876aa;font-style:italic;">EIGHT</span>, <span style="color:#9876aa;font-style:italic;">NINE</span>, <span style="color:#9876aa;font-style:italic;">TEN</span>, <span style="color:#9876aa;font-style:italic;">JACK</span>, <span style="color:#9876aa;font-style:italic;">QUEEN</span>, <span style="color:#9876aa;font-style:italic;">KING </span>}<br><br><span style="color:#cc7832;">enum </span>Suit { <span style="color:#9876aa;font-style:italic;">SPADES</span>, <span style="color:#9876aa;font-style:italic;">DIAMONDS</span>, <span style="color:#9876aa;font-style:italic;">HEARTS</span>, <span style="color:#9876aa;font-style:italic;">CLUBS </span>}<br><br><span style="color:#bbb529;">@Sortable</span>(includes=<span style="color:#6a8759;">'suit,rank'</span>)<br><span style="color:#cc7832;">record </span>Card(Rank rank, Suit suit) { }<br><br><span style="color:#cc7832;">var </span>cards = Sets.<span style="color:#9876aa;font-style:italic;">cartesianProduct</span>(EnumSet.<span style="color:#9876aa;font-style:italic;">allOf</span>(Rank), EnumSet.<span style="color:#9876aa;font-style:italic;">allOf</span>(Suit), Card::<span style="color:#cc7832;">new</span>)<br><span style="color:#cc7832;">var </span>cardsBySuit = cards.groupBy(Card::suit)<br><span style="color:#cc7832;">var </span>cardsByRank = cards.groupBy(Card::rank)<br><br><span style="color:#cc7832;">assert </span>[cards, cardsByRank, cardsBySuit]*.size() == [<span style="color:#6897bb;">52</span>, <span style="color:#6897bb;">13 </span>,<span style="color:#6897bb;">4</span>]<br><br><span style="color:#cc7832;">var </span>random = <span style="color:#cc7832;">new </span>Random(<span style="color:#6897bb;">42L</span>)<br><span style="color:#cc7832;">var </span>deck = cards.toList().shuffleThis(random).shuffleThis(random).shuffleThis(random).toStack()<br>(<span style="color:#6897bb;">1</span>..<span style="color:#6897bb;">5</span>).collect(i -&gt; deck.pop(<span style="color:#6897bb;">5</span>).toSortedList()).each(<span style="color:#cc7832;">this</span>::println)<br></pre><p>And here is the output:</p>
<pre>[Card[rank=FOUR, suit=SPADES], Card[rank=FOUR, suit=DIAMONDS], Card[rank=SIX, suit=HEARTS], Card[rank=NINE, suit=CLUBS], Card[rank=JACK, suit=CLUBS]]
[Card[rank=FIVE, suit=DIAMONDS], Card[rank=TWO, suit=HEARTS], Card[rank=FIVE, suit=HEARTS], Card[rank=TEN, suit=CLUBS], Card[rank=QUEEN, suit=CLUBS]]
[Card[rank=FIVE, suit=SPADES], Card[rank=NINE, suit=SPADES], Card[rank=QUEEN, suit=SPADES], Card[rank=THREE, suit=DIAMONDS], Card[rank=TWO, suit=CLUBS]]
[Card[rank=EIGHT, suit=SPADES], Card[rank=TWO, suit=DIAMONDS], Card[rank=EIGHT, suit=DIAMONDS], Card[rank=KING, suit=HEARTS], Card[rank=FIVE, suit=CLUBS]]
[Card[rank=SIX, suit=SPADES], Card[rank=KING, suit=DIAMONDS], Card[rank=THREE, suit=HEARTS], Card[rank=TEN, suit=HEARTS], Card[rank=QUEEN, suit=HEARTS]]
</pre>
<p>We can do a similar example with the built-in JDK collections and make some additional tweaks for nicer output:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">enum </span>Rank {<br>    <span style="color:#9876aa;font-style:italic;">ACE</span>, <span style="color:#9876aa;font-style:italic;">TWO</span>, <span style="color:#9876aa;font-style:italic;">THREE</span>, <span style="color:#9876aa;font-style:italic;">FOUR</span>, <span style="color:#9876aa;font-style:italic;">FIVE</span>, <span style="color:#9876aa;font-style:italic;">SIX</span>, <span style="color:#9876aa;font-style:italic;">SEVEN</span>, <span style="color:#9876aa;font-style:italic;">EIGHT</span>, <span style="color:#9876aa;font-style:italic;">NINE</span>, <span style="color:#9876aa;font-style:italic;">TEN</span>, <span style="color:#9876aa;font-style:italic;">JACK</span>, <span style="color:#9876aa;font-style:italic;">QUEEN</span>, <span style="color:#9876aa;font-style:italic;">KING<br></span><span style="color:#9876aa;font-style:italic;">    </span>String toString() { [<span style="color:#6a8759;">'A'</span>, *<span style="color:#6a8759;">'2'</span>..<span style="color:#6a8759;">'9'</span>, <span style="color:#6a8759;">'10'</span>, <span style="color:#6a8759;">'J'</span>, <span style="color:#6a8759;">'Q'</span>, <span style="color:#6a8759;">'K'</span>][ordinal()] }<br>}<br><br><span style="color:#cc7832;">enum </span>Suit {<br>    <span style="color:#9876aa;font-style:italic;">SPADES</span>, <span style="color:#9876aa;font-style:italic;">DIAMONDS</span>, <span style="color:#9876aa;font-style:italic;">HEARTS</span>, <span style="color:#9876aa;font-style:italic;">CLUBS<br></span><span style="color:#9876aa;font-style:italic;">    </span>String toString() { <span style="color:#6a8759;">'</span><span style="color:#6a8759;font-family:'Courier New',monospace;">♠♦♥♣</span><span style="color:#6a8759;">'</span>[ordinal()] }<br>}<br><br><span style="color:#bbb529;">@Sortable</span>(includes=<span style="color:#6a8759;">'suit,rank'</span>)<br><span style="color:#cc7832;">record </span>Card(Rank rank, Suit suit) {<br>    <span style="color:#ffc66d;">Card</span>(List srPair) { <span style="color:#cc7832;">this</span>(srPair[<span style="color:#6897bb;">1</span>], srPair[<span style="color:#6897bb;">0</span>]) }<br>    String toString() { <span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span><span style="color:#9876aa;">rank</span><span style="font-weight:bold;">}</span>$<span style="font-weight:bold;">{</span><span style="color:#9876aa;">suit</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">" </span>}<br>}<br><br><span style="color:#cc7832;">var </span>cards = [Suit.<span style="color:#9876aa;font-style:italic;">values</span>(), Rank.<span style="color:#9876aa;font-style:italic;">values</span>()].combinations().collect(Card::<span style="color:#cc7832;">new</span>)<br><span style="color:#cc7832;">var </span>cardsBySuit = cards.groupBy(Card::suit)<br><span style="color:#cc7832;">var </span>cardsByRank = cards.groupBy(Card::rank)<br><br><span style="color:#cc7832;">assert </span>[cards, cardsByRank, cardsBySuit]*.size() == [<span style="color:#6897bb;">52</span>, <span style="color:#6897bb;">13</span>, <span style="color:#6897bb;">4</span>]<br><br><span style="color:#cc7832;">var </span>random = <span style="color:#cc7832;">new </span>Random(<span style="color:#6897bb;">42L</span>)<br><span style="color:#6897bb;">3</span>.times <span style="font-weight:bold;">{ </span>cards.shuffle(random) <span style="font-weight:bold;">}<br></span><span style="color:#cc7832;">var </span>deck = cards <span style="color:#cc7832;">as </span>Stack<br><span style="color:#6897bb;">5</span>.times <span style="font-weight:bold;">{ </span>println <span style="color:#6a8759;">"Hand </span>$<span style="font-weight:bold;">{</span>it+<span style="color:#6897bb;">1</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">: </span>$<span style="font-weight:bold;">{</span>(<span style="color:#6897bb;">0</span>..<span style="color:#6897bb;">5</span>).collect<span style="font-weight:bold;">{ </span>deck.pop() <span style="font-weight:bold;">}</span>.sort()<span style="font-weight:bold;">}</span><span style="color:#6a8759;">" </span><span style="font-weight:bold;">}<br></span><span style="font-weight:bold;"><br></span>println <span style="color:#6a8759;">"Remaining cards sorted:</span><span style="color:#cc7832;">\n</span>$<span style="font-weight:bold;">{</span>deck.sort()<span style="font-weight:bold;">}</span><span style="color:#6a8759;">"</span></pre>
<p>Which has this output:</p>
<p><img style="width:50%" src="https://blogs.apache.org/groovy/mediaresource/f519b2c3-c303-429e-b34e-97e6eac94253" alt="Cards3.png"><br></p>
<p>Both these Groovy examples run on JDK versions from 8 to 19<br>(emulated records are used in JDK versions 8 to 15).</p><p><b>Updated 25/Sep/2022</b>: Use same ordering for the JDK collections version.</p>
