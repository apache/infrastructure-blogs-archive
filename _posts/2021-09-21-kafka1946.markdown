---
layout: post
title: What's New in Apache Kafka 3.0.0
date: '2021-09-21T15:56:38+00:00'
categories: kafka
---
<p>
I'm pleased to announce the release of <a href="https://kafka.apache.org/downloads">Apache Kafka 3.0</a> on behalf of the Apache Kafka&reg; community. Apache Kafka 3.0 is a major release in more ways than one. Apache Kafka 3.0 introduces a variety of new features, breaking API changes, and improvements to KRaft&mdash;Apache Kafka’s built-in consensus mechanism that will replace Apache ZooKeeper&#x2122;. 
</p>
<p>
While KRaft is not yet recommended for production (<a href="https://github.com/apache/kafka/blob/trunk/config/kraft/README.md">list of known gaps</a>), we have made many improvements to the KRaft metadata and APIs. Exactly-once and partition reassignment support are worth highlighting. We encourage you to check out KRaft's new features and to try it out in a development environment.
</p>
<p>
Starting with Apache Kafka 3.0, the Producer enables the strongest delivery guarantees by default (<code>acks=all</code>, <code>enable.idempotence=true</code>). This means that users now get ordering and durability by default.
</p>
<p>
Also, don’t miss the Kafka Connect task restart enhancements, Kafka Streams improvements in timestamp-based synchronization, and MirrorMaker2’s more flexible configuration options.
</p>
<p>
To review the full list of features and enhancements, be sure to read the <a href="https://downloads.apache.org/kafka/3.0.0/RELEASE_NOTES.html">release notes</a>. You can also watch the <a href="https://www.youtube.com/watch?v=7SDwWFYnhGA">release video</a> for a summary of what’s new in Apache Kafka 3.0.0.
</p>

<h2>Universal changes</h2>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308223">KIP-750 (Part I): Deprecate support for Java 8 in Kafka</a>
</h3>
<p>
Support for Java 8 is deprecated across all components of the Apache Kafka project in 3.0. This will give users time to adapt before the next major release (4.0), when Java 8 support is planned to be removed.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308218">KIP-751 (Part I): Deprecate support for Scala 2.12 in Kafka</a>
</h3>
<p>
Support for Scala 2.12 is also deprecated everywhere in Apache Kafka 3.0. As with Java 8, we’re giving users time to adapt because support for Scala 2.12 is planned to be removed in the next major release (4.0). 
</p>

<h2>Kafka Broker, Producer, Consumer and AdminClient</h2>

<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-630%3A+Kafka+Raft+Snapshot">KIP-630: Kafka Raft Snapshot</a>
</h3>
<p>
A major feature that we are introducing with 3.0 is the ability for KRaft Controllers and KRaft Brokers to generate, replicate, and load snapshots for the metadata topic partition named <code>__cluster_metadata</code>. This topic is used by the Kafka Cluster to store and replicate metadata information about the cluster like Broker configuration, topic partition assignment, leadership, etc. As this state grows, Kafka Raft Snapshot provides an efficient way to store, load, and replicate this information.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-746%3A+Revise+KRaft+Metadata+Records">KIP-746: Revise KRaft Metadata Records</a>
</h3>
<p>
Experience and continuous development since the first version of the Kafka Raft Controller have surfaced the need to revise a few of the metadata record types that are used when Kafka is configured to run without ZooKeeper (ZK). 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177049344">KIP-730: Producer ID generation in KRaft mode</a>
</h3>
<p>
With 3.0 and <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177049344">KIP-730</a> the Kafka Controller is now completely taking over the responsibility of generating a Kafka Producer ID. The Controller is doing so both in ZK and KRaft modes. This takes us closer to the bridge release, which will allow users to transition from Kafka deployments that use ZK to new deployments that use KRaft. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-679%3A+Producer+will+enable+the+strongest+delivery+guarantee+by+default">KIP-679: Producer will enable the strongest delivery guarantee by default</a>
</h3>
<p>
Starting with 3.0, the Kafka Producer turns on by default idempotency and the acknowledgement of delivery by all of the replicas. This makes record delivery guarantees stronger by default. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-735%3A+Increase+default+consumer+session+timeout">KIP-735: Increase default consumer session timeout</a>
</h3>
<p>
The default value of the Kafka Consumer’s configuration property <code>session.timeout.ms</code> is increased from 10 seconds to 45 seconds. This will allow the Consumer to adapt better by default to transient network failures and avoid consecutive rebalances when a Consumer appears to leave the group only temporarily.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=173084258">KIP-709: Extend OffsetFetch requests to accept multiple group ids</a>
</h3>
<p>
Requesting the current offsets of a Kafka Consumer group has been possible for quite some time. But fetching the offsets of multiple consumer groups requires an individual request for each group. In 3.0 and with <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=173084258">KIP-709</a>, the fetch and AdminClient APIs are extended to support reading the offsets of multiple consumer groups at the same time within a single request/response.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-699%3A+Update+FindCoordinator+to+resolve+multiple+Coordinators+at+a+time">KIP-699: Update FindCoordinator to resolve multiple Coordinators at a time</a>
</h3>
<p>
Supporting operations that can be applied to multiple consumer groups at the same time in an efficient way heavily depends on the ability of the clients to discover the coordinators of these groups efficiently. This becomes possible with <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-699%3A+Update+FindCoordinator+to+resolve+multiple+Coordinators+at+a+time">KIP-699</a>, which adds support for discovering the coordinators for multiple groups with one request. Kafka clients have been updated to use this optimization when talking to new Kafka Brokers that support this request. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-724%3A+Drop+support+for+message+formats+v0+and+v1">KIP-724: Drop support for message formats v0 and v1</a>
</h3>
<p>
Four years since its introduction in June 2017 with <a href="https://kafka.apache.org/0110/documentation.html">Kafka 0.11.0</a>, message format v2 has been the default message format. Thus, with enough water (or streams if you may) having flowed under the bridge, the major release of 3.0 gives us a good opportunity to deprecate the older message formats&mdash;namely v0 and v1. These formats are rarely in use today. With 3.0, users will get a warning if they configure their Brokers to use the message formats v0 or v1. This option will be removed in Kafka 4.0 (see <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-724%3A+Drop+support+for+message+formats+v0+and+v1">KIP-724</a> for details and implications from the deprecation of v0 and v1 message formats). 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-707%3A+The+future+of+KafkaFuture">KIP-707: The future of KafkaFuture</a>
</h3>
<p>
When the <code>KafkaFuture</code> type was introduced to facilitate the implementation of the Kafka AdminClient, pre-Java 8 versions were still in widespread use and Java 7 was officially supported by Kafka. Fast forward to a few years later and now Kafka runs on Java versions that support the <code>CompletionStage</code> and <code>CompletableFuture</code> class types. With <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-707%3A+The+future+of+KafkaFuture">KIP-707</a>, <code>KafkaFuture</code> adds a method to return a <code>CompletionStage</code> object and in that way enhances the usability of <code>KafkaFuture</code> in a backwards compatible way.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-466%3A+Add+support+for+List%3CT%3E+serialization+and+deserialization">KIP-466: Add support for List&lt;T&gt; serialization and deserialization</a>
</h3>
<p>
<a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-466%3A+Add+support+for+List%3CT%3E+serialization+and+deserialization">KIP-466</a> adds new classes and methods for the serialization and deserialization of generic lists&mdash;a feature useful to Kafka clients and Kafka Streams alike. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-734%3A+Improve+AdminClient.listOffsets+to+return+timestamp+and+offset+for+the+record+with+the+largest+timestamp">KIP-734: Improve AdminClient.listOffsets to return timestamp and offset for the record with the largest timestamp</a>
</h3>
<p>
The users’ capabilities to list offsets of Kafka topic/partitions have been extended. With <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-734%3A+Improve+AdminClient.listOffsets+to+return+timestamp+and+offset+for+the+record+with+the+largest+timestamp">KIP-734</a>, users can now ask the AdminClient to return the offset and timestamp of the record with the highest timestamp in a topic/partition. (This is not to be confused with what the AdminClient returns already as the latest offset&mdash;which is the offset of the next record to be written in the topic/partition.) This extension to the existing ListOffsets API allows users to probe the liveliness of a partition by asking which is the offset of the most recent record written and what its timestamp is.
</p>
<h2>Kafka Connect</h2>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308623">KIP-745: Connect API to restart connector and tasks</a>
</h3>
<p>
In Kafka Connect a connector is represented during runtime as a group of a <code>Connector</code> class instance and one or more <code>Task</code> class instances, and most operations on connectors available through the Connect REST API can be applied to the group as a whole. A notable exception since the beginning has been the restart endpoints for the <code>Connector</code> and <code>Task</code> instances. To restart the connector as a whole, users had to make individual calls to restart the <code>Connector</code> instance and the <code>Task</code> instances. In 3.0, <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181308623">KIP-745</a> gives the ability to the users to restart either all or only the failed of a connector’s <code>Connector</code> and <code>Task</code> instances with a single call. This feature is an add-on capability and the previous behavior of the <code>restart</code> REST API remains unchanged.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-738%3A+Removal+of+Connect%27s+internal+converter+properties">KIP-738: Removal of Connect's internal converter properties</a>
</h3>
<p>
Following their deprecation in the previous major release (<a href="https://kafka.apache.org/20/documentation.html">Apache Kafka 2.0</a>), <code>internal.key.converter</code> and <code>internal.value.converter</code> are removed as configuration properties and prefixes in the Connect worker’s configuration. Moving forward, internal Connect topics will exclusively use the <code>JsonConverter</code> to store records without embedded schemas. Any existing Connect clusters that used different converters will have to port their internal topics to the new format (see <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-738%3A+Removal+of+Connect%27s+internal+converter+properties">KIP-738</a> for details on the upgrade path).
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177047383">KIP-722: Enable connector client overrides by default</a>
</h3>
<p>
Since <a href="https://kafka.apache.org/23/documentation.html">Apache Kafka 2.3.0</a>, a Connect worker can be configured to allow connector configurations to override the Kafka client properties used by the connector. This has been a widely used feature and now with the opportunity of a major release the ability to override connector client properties is enabled by default (<code>connector.client.config.override.policy</code> is set to <code>All</code> by default).
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177047379">KIP-721: Enable connector log contexts in Connect Log4j configuration</a>
</h3>
<p>
Another feature that was introduced back in 2.3.0 but hasn’t been enabled by default up to this point is connector log contexts. This is changing in 3.0 and the connector context is added by default in the pattern of <code>log4j</code> logs of the Connect worker. An upgrade to 3.0 from a previous release will change the format of log lines exported by <code>log4j</code> by adding the connector context, where appropriate. 
</p>
<h2>Kafka Streams</h2>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-695%3A+Further+Improve+Kafka+Streams+Timestamp+Synchronization">KIP-695: Further improve Kafka Streams timestamp synchronization</a>
</h3>
<p>
<a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-695%3A+Further+Improve+Kafka+Streams+Timestamp+Synchronization">KIP-695</a> enhances the semantics of how Streams tasks choose to fetch records, and extends the meaning and the available values of the configuration property <code>max.task.idle.ms</code>. This change required a new method in the Kafka Consumer API, <code>currentLag</code>, that is able to return the consumer lag of a specific partition if it is known locally and without contacting the Kafka Broker. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-715%3A+Expose+Committed+offset+in+streams">KIP-715: Expose committed offset in streams</a>
</h3>
<p>
Starting with 3.0, three new methods are added to the <code>TaskMetadata</code> interface: <code>committedOffsets</code>, <code>endOffsets</code>, and <code>timeCurrentIdlingStarted</code>. These methods can allow Streams applications to keep track of the progress and health of its tasks. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181306557">KIP-740: Clean up public API in TaskId</a>
</h3>
<p>
<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181306557">KIP-740</a> represents a significant renovation of the <code>TaskId</code> class. Several methods and all internal fields are deprecated, with new <code>subtopology()</code> and <code>partition()</code> getters replacing the old <code>topicGroupId</code> and <code>partition</code> fields (see also <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181307996">KIP-744</a> for relevant changes and an amendment to <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181306557">KIP-740</a>).
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181307996">KIP-744: Migrate TaskMetadata and ThreadMetadata to an interface with internal implementation</a>
</h3>
<p>
<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181307996">KIP-744</a> takes the changes proposed by <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181306557">KIP-740</a> one step further and separates the implementation from the public API of a number of classes. To accomplish this, the new interfaces <code>TaskMetadata</code>, <code>ThreadMetadata</code>, and <code>StreamsMetadata</code> are introduced while the existing classes with the same names are deprecated. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-666%3A+Add+Instant-based+methods+to+ReadOnlySessionStore">KIP-666: Add Instant-based methods to ReadOnlySessionStore</a>
</h3>
<p>
The Interactive Queries API is extended with a new set of methods in the <code>ReadOnlySessionStore</code> and <code>SessionStore</code> interfaces that accept arguments of the <code>Instant</code> data type. This change will affect any custom read-only Interactive Query session store implementations that will need to implement the new methods. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-622%3A+Add+currentSystemTimeMs+and+currentStreamTimeMs+to+ProcessorContext">KIP-622: Add currentSystemTimeMs and currentStreamTimeMs to ProcessorContext</a>
</h3>
<p>
The <code>ProcessorContext</code> adds two new methods in 3.0, <code>currentSystemTimeMs</code> and <code>currentStreamTimeMs</code>. The new methods give users the ability to query the cached system time and the streams time respectively, and they can be used in a uniform way in production and test code. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-743%3A+Remove+config+value+0.10.0-2.4+of+Streams+built-in+metrics+version+config">KIP-743: Remove config value 0.10.0-2.4 of Streams built-in metrics version config</a>
</h3>
<p>
Support for the legacy metrics structure for the built-in metrics in Streams is lifted in 3.0. <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-743%3A+Remove+config+value+0.10.0-2.4+of+Streams+built-in+metrics+version+config">KIP-743</a> is removing the value <code>0.10.0-2.4</code> from the configuration property <code>built.in.metrics.version</code>. That leaves <code>latest</code> as the only valid value of this property at the moment (has been the default value since 2.5). 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-741%3A+Change+default+serde+to+be+null">KIP-741: Change default SerDe to be null</a>
</h3>
<p>
The prior default value of the default SerDe properties is removed. Streams used to default to the <code>ByteArraySerde</code>. Starting with 3.0, there is no default, and users are required to either set their SerDe as needed in the API or set a default via  DEFAULT_KEY_SERDE_CLASS_CONFIG and DEFAULT_VALUE_SERDE_CLASS_CONFIG in their Streams configuration. The prior default was almost always not applicable to real applications and caused more confusion than convenience.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177050750">KIP-733: Change Kafka Streams default replication factor config</a>
</h3>
<p>
With the opportunity of a major release, the default value of the Streams configuration property <code>replication.factor</code> changes from 1 to -1. This will allow new Streams applications to use the default replication factor defined at the Kafka Broker and therefore won’t be required to set this configuration value when they move to production.  Note that Kafka Brokers version 2.5 or above are required for the new default value.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-732%3A+Deprecate+eos-alpha+and+replace+eos-beta+with+eos-v2">KIP-732: Deprecate eos-alpha and replace eos-beta with eos-v2</a>
</h3>
<p>
Another Streams configuration value that is deprecated in 3.0 is <code>exactly_once</code> as a value of the property <code>processing.guarantee</code>. The value <code>exactly_once</code> corresponds to the original implementation of Exactly Once Semantics (EOS), available to any Streams applications that connects to a Kafka cluster version 0.11.0 or newer. This first implementation of EOS has been superseded by the second implementation of EOS in Streams, which was represented by the value <code>exactly_once_beta</code> in the <code>processing.guarantee</code> property. Moving forward, the name <code>exactly_once_beta</code> is also deprecated and replaced by the new name <code>exactly_once_v2</code>. In the next major version (4.0), both <code>exactly_once</code> and <code>exactly_once_beta</code> will be removed, leaving <code>exactly_once_v2</code> as the only option for EOS delivery guarantees. 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177047930">KIP-725: Streamlining configurations for WindowedSerializer and WindowedDeserializer</a>
</h3>
<p>
The configuration properties <code>default.windowed.key.serde.inner</code> and <code>default.windowed.value.serde.inner</code> are deprecated in favor of a single new property <code>windowed.inner.class.serde</code> for use by the Kafka Consumer. Kafka Streams users are recommended to configure their windowed SerDe by passing this in to the SerDe constructor instead and then supplying the SerDe wherever it’s used in topology.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-633%3A+Deprecate+24-hour+Default+Grace+Period+for+Windowed+Operations+in+Streams">KIP-633: Deprecate 24 hour default for the grace period in Streams</a>
</h3>
<p>
In Kafka Streams, windowed operations are allowed to process records outside of their window according to a configuration property that is called the grace period. Previously, this configuration was optional and easy to miss, leading to the default of 24 hours. This was a frequent source of confusion for users of the <code>Suppression</code> operator, since it would buffer records until the grace period had elapsed and therefore add a 24 hour latency. In 3.0, <code>Windows</code> classes are enhanced with factory methods that require them to be constructed with a custom grace period or no grace period at all. The old factory methods that applied a default grace period of 24 hours have been deprecated, along with the corresponding <code>grace()</code> APIs which are incompatible with the new factory methods that already set this config.
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=158862177">KIP-623: Add "internal-topics" option to streams application reset tool</a>
</h3>
<p>
The Streams use of the application reset tool <code>kafka-streams-application-reset</code> becomes more flexible with the addition of a new command-line parameter: <code>--internal-topics</code>. The new parameter accepts a list of comma-separated topic names that correspond to internal topics that can be scheduled for deletion with this application tool. Combining this new parameter with the existing parameter <code>--dry-run</code> allows users to confirm which topics will be deleted and specify a subset of them if necessary before actually performing the deletion operation.
</p>
<h2>MirrorMaker</h2>
<h3>
    <a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=177046121">KIP-720: Deprecate MirrorMaker v1</a>
</h3>
<p>
With 3.0, the first version of MirrorMaker is being deprecated. Going forward, development of new features and major improvements will focus on MirrorMaker2 (MM2). 
</p>
<h3>
    <a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-716%3A+Allow+configuring+the+location+of+the+offset-syncs+topic+with+MirrorMaker2">KIP-716: Allow configuring the location of the offset-syncs topic with MirrorMaker2</a>
</h3>
<p>
With 3.0, users can now configure where MirrorMaker2 creates and stores its internal topic that it uses to convert consumer group offsets. This will allow users of MirrorMaker2 to maintain the source Kafka cluster as a strictly read-only cluster and use a different Kafka cluster to store offset records (that being the target Kafka cluster or even a third cluster beyond the source and target clusters). 
</p>

<h2>Conclusion</h2>
<p>
Apache Kafka 3.0 is a major step forward for the Apache Kafka project. To learn more: 
</p>
<ul>
    <li>See the <a href="https://downloads.apache.org/kafka/3.0.0/RELEASE_NOTES.html">release
        notes</a> for the full list of changes.
    </li>
    <li>Check out the <a href="https://www.youtube.com/watch?v=7SDwWFYnhGA">video</a> or the <a href="https://developer.confluent.io/podcast/apache-kafka-30-improving-kraft-and-an-overview-of-new-features">podcast</a> to learn more.
    </li>
    <li>Download <a href="https://kafka.apache.org/downloads">Apache Kafka 3.0.0</a> to get started with the latest release.</li>
</ul>
<p>This was a huge community effort, so thank you to everyone who contributed to this release, including all our users
    and our 141 authors and reviewers:</p>
<p>A. Sophie Blee-Goldman, Adil Houmadi, Akhilesh Dubey, Alec Thomas, Alexander Iskuskov, Almog Gavra, Alok Nikhil, Alok Thatikunta, Andrew Lee, Bill Bejeck, Boyang Chen, Bruno Cadonna, CHUN-HAO TANG, Cao Manh Dat, Cheng Tan, Chia-Ping Tsai, Chris Egerton, Colin P. McCabe, Cong Ding, Daniel Urban, Daniyar Yeralin, David Arthur, David Christle, David Jacot, David Mao, David Osvath, Davor Poldrugo, Dejan Stojadinović, Dhruvil Shah, Diego Erdody, Dong Lin, Dongjoon Hyun, Dániel Urbán, Edoardo Comar, Edwin Hobor, Eric Beaudet, Ewen Cheslack-Postava, Gardner Vickers, Gasparina Damien, Geordie, Greg Harris, Gunnar Morling, Guozhang Wang, Gwen (Chen) Shapira, Ignacio Acuña Frías, Igor Soarez, Ismael Juma, Israel Ekpo, Ivan Ponomarev, Ivan Yurchenko, Jason Gustafson, Jeff Kim, Jim Galasyn, Jim Hurne, JoelWee, John Gray, John Roesler, Jorge Esteban Quilcate Otoya, Josep Prat, José Armando García Sancio, Juan Gonzalez-Zurita, Jun Rao, Justin Mclean, Justine Olshan, Kahn Cheny, Kalpesh Patel, Kamal Chandraprakash, Konstantine Karantasis, Kowshik Prakasam, Leah Thomas, Lee Dongjin, Lev Zemlyanov, Liu Qiang, Lucas Bradstreet, Luke Chen, Manikumar Reddy, Marco Aurelio Lotz, Matthew de Detrich, Matthias J. Sax, Michael G. Noll, Michael Noll, Mickael Maison, Nathan Lincoln, Niket Goel, Nikhil Bhatia, Omnia G H Ibrahim, Peng Lei, Phil Hardwick, Rajini Sivaram, Randall Hauch, Rohan Desai, Rohit Deshpande, Rohit Sachan, Ron Dagostino, Ryan Dielhenn, Ryanne Dolan, Sanjana Kaundinya, Sarwar Bhuiyan, Satish Duggana, Scott Hendricks, Sergio Peña, Shao Yang Hong, Shay Elkin, Stanislav Vodetskyi, Sven Erik Knop, Tom Bentley, UnityLung, Uwe Eisele, Vahid Hashemian, Valery Kokorev, Victoria Xia, Viktor Somogyi-Vass, Viswanathan Ranganathan, Vito Jeng, Walker Carlson, Warren Zhu, Xavier Léauté, YiDing-Duke, Zara Lim, Zhao Haiyuan, bmaidics, cyc, dengziming, feyman2016, high.lee, iamgd67, iczellion, ketulgupta1995, lamberken, loboya~, nicolasguyomar, prince-mahajan, runom, shenwenbing, thomaskwscott, tinawenqiao, vamossagar12, wenbingshen, wycccccc, xjin-Confluent, zhaohaidao</p>
