---
layout: post
title: Natural Language Processing with Groovy, OpenNLP, CoreNLP, Nlp4j, Datumbox,
  Smile, Spark NLP, DJL and TensorFlow
date: '2022-08-07T07:34:08+00:00'
categories: groovy
---
<p>Natural Language Processing is certainly a large and sometimes complex topic with many aspects. Some of those aspects deserve entire blogs in their own right. For this blog, we will briefly look at a few simple use cases illustrating where you might be able to use NLP technology in your own project.</p>

<h3>Language Detection</h3>

<p>Knowing what language some text represents can be a critical first step to subsequent processing. Let's look at how to predict the language using a pre-built model and <a href="https://opennlp.apache.org/" target="_blank">Apache OpenNLP</a>. Here, <code>ResourceHelper</code> is a utility class used to download and cache the model. The first run may take a little while as it downloads the model. Subsequent runs should be fast. Here we are using a well-known model referenced in the OpenNLP documentation.</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>helper = <span style="color:#cc7832;">new </span>ResourceHelper(<span style="color:#6a8759;">'https://dlcdn.apache.org/opennlp/models/langdetect/1.8.3/'</span>)<br><span style="color:#cc7832;">def </span>model = <span style="color:#cc7832;">new </span>LanguageDetectorModel(helper.load(<span style="color:#6a8759;">'langdetect-183'</span>))<br><span style="color:#cc7832;">def </span>detector = <span style="color:#cc7832;">new </span>LanguageDetectorME(model)<br><br>[ <span style="color:#6a8759;">spa</span>: <span style="color:#6a8759;">'Bienvenido a Madrid'</span>, <span style="color:#6a8759;">fra</span>: <span style="color:#6a8759;">'Bienvenue à Paris'</span>,<br>  <span style="color:#6a8759;">dan</span>: <span style="color:#6a8759;">'Velkommen til København'</span>, <span style="color:#6a8759;">bul</span>: <span style="color:#6a8759;">'Добре дошли в София'<br></span>].each <span style="font-weight:bold;">{ </span>k, v <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">assert </span>detector.predictLanguage(v).<span style="color:#9876aa;">lang </span>== k<br><span style="font-weight:bold;">}</span></pre>
<p>The <code>LanguageDetectorME</code> class lets us predict the language. In general, the predictor may not be accurate on small samples of text but it was good enough for our example. We've used the language code as the key in our map and we check that against the predicted language.</p><p>A more complex scenario is training your own model. Let's look at how to do that with <a href="https://www.datumbox.com/machine-learning-framework/" target="_blank">Datumbox</a>. Datumbox has a <a href="https://github.com/datumbox/datumbox-framework-zoo" target="_blank">pre-trained models zoo</a> but its language detection model didn't seem to work well for the small snippets in the next example, so we'll train our own model. First, we'll define our datasets:<br></p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>datasets = [<br>    <span style="color:#6a8759;">English</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"training.language.en.txt"</span>).toURI(),<br>    <span style="color:#6a8759;">French</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"training.language.fr.txt"</span>).toURI(),<br>    <span style="color:#6a8759;">German</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"training.language.de.txt"</span>).toURI(),<br>    <span style="color:#6a8759;">Spanish</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"training.language.es.txt"</span>).toURI(),<br>    <span style="color:#6a8759;">Indonesian</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"training.language.id.txt"</span>).toURI()<br>]</pre><p style="">The <code>de</code> training dataset comes from the <a href="https://github.com/datumbox/NaiveBayesClassifier/tree/master/resources/datasets/training.language.de.txt" target="_blank">Datumbox examples</a>. The training datasets for the other languages are from <a href="https://www.kaggle.com/zarajamshaid/language-identification-datasst" target="_blank">Kaggle</a>.</p><p style="">We set up the training parameters needed by our algorithm:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>trainingParams = <span style="color:#cc7832;">new </span>TextClassifier.TrainingParameters(<br>    <span style="color:#6a8759;">numericalScalerTrainingParameters</span>: <span style="color:#cc7832;">null</span>,<br>    <span style="color:#6a8759;">featureSelectorTrainingParametersList</span>: [<span style="color:#cc7832;">new </span>ChisquareSelect.TrainingParameters()],<br>    <span style="color:#6a8759;">textExtractorParameters</span>: <span style="color:#cc7832;">new </span>NgramsExtractor.Parameters(),<br>    <span style="color:#6a8759;">modelerTrainingParameters</span>: <span style="color:#cc7832;">new </span>MultinomialNaiveBayes.TrainingParameters()<br>)<br></pre><p style="">We'll use a Naïve Bayes model with Chisquare feature selection.</p><p style="">Next we create our algorithm, train it with our training dataset, and then validate it against the training dataset. We'd normally want to split the data into training and testing datasets, to give us a more accurate statistic of the accuracy of our model. But for simplicity, while still illustrating the API, we'll train and validate with our entire dataset:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>config = Configuration.<span style="color:#9876aa;font-style:italic;">configuration<br></span><span style="color:#cc7832;">def </span>classifier = MLBuilder.<span style="color:#9876aa;font-style:italic;">create</span>(trainingParams, config)<br>classifier.fit(datasets)<br><span style="color:#cc7832;">def </span>metrics = classifier.validate(datasets)<br>println <span style="color:#6a8759;">"Classifier Accuracy (using training data): </span>$metrics.accuracy<span style="color:#6a8759;">"<br></span></pre><p style="">When run, we see the following output:</p><pre style="line-height: 1.42857;">Classifier Accuracy (using training data): 0.9975609756097561
</pre><p>Our test dataset will consist of some hard-coded illustrative phrases. Let's use our model to predict the language for each phrase:</p>
<pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;">[   <span style="color:#6a8759;">'Bienvenido a Madrid'</span>, <span style="color:#6a8759;">'Bienvenue à Paris'</span>, <span style="color:#6a8759;">'Welcome to London'</span>,<br>    <span style="color:#6a8759;">'Willkommen in Berlin'</span>, <span style="color:#6a8759;">'Selamat Datang di Jakarta'<br></span>].each <span style="font-weight:bold;">{ </span>txt <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>r = classifier.predict(txt)<br>    <span style="color:#cc7832;">def </span>predicted = r.YPredicted<br>    <span style="color:#cc7832;">def </span>probability = sprintf <span style="color:#6a8759;">'%4.2f'</span>, r.YPredictedProbabilities.get(predicted)<br>    println <span style="color:#6a8759;">"Classifying: '</span>$txt<span style="color:#6a8759;">',  Predicted: </span>$predicted<span style="color:#6a8759;">,  Probability: </span>$probability<span style="color:#6a8759;">"<br></span><span style="font-weight:bold;">}<br></span></pre>
<p>When run, it has this output:</p>
<pre>Classifying: 'Bienvenido a Madrid',&nbsp; Predicted: Spanish,&nbsp; Probability: 0.83
Classifying: 'Bienvenue à Paris',&nbsp; Predicted: French,&nbsp; Probability: 0.71
Classifying: 'Welcome to London',&nbsp; Predicted: English,&nbsp; Probability: 1.00
Classifying: 'Willkommen in Berlin',&nbsp; Predicted: German,&nbsp; Probability: 0.84
Classifying: 'Selamat Datang di Jakarta',&nbsp; Predicted: Indonesian,&nbsp; Probability: 1.00
</pre>
<div>Given these phrases are very short, it is nice to get them all correct, and the probabilities all seem reasonable for this scenario.</div>

<h3>Parts of Speech</h3>

<p>Parts of speech (POS) analysers examine each part of a sentence (the words and potentially punctuation) in terms of the role they play in a sentence. A typical analyser will assign or annotate words with their role like identifying nouns, verbs, adjectives and so forth. This can be a key early step for tools like the voice assistants from Amazon, Apple and Google.</p><p> We'll start by looking at a perhaps lesser known library Nlp4j before looking at some others. In fact, there are multiple Nlp4j libraries. We'll use the one from <a href="https://nlp4j.org/" target="_blank">nlp4j.org</a>,&nbsp;which seems to be the most active and recently updated.</p><p>This library uses the <a href="https://stanfordnlp.github.io/CoreNLP/" target="_blank">Stanford CoreNLP</a> library under the covers for its English POS functionality. The library has the concept of documents, and annotators that work on documents. Once annotated, we can print out all of the discovered words and their annotations:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">var </span>doc = <span style="color:#cc7832;">new </span>DefaultDocument()<br>doc.putAttribute(<span style="color:#6a8759;">'text'</span>, <span style="color:#6a8759;">'I eat sushi with chopsticks.'</span>)<br><span style="color:#cc7832;">var </span>ann = <span style="color:#cc7832;">new </span>StanfordPosAnnotator()<br>ann.setProperty(<span style="color:#6a8759;">'target'</span>, <span style="color:#6a8759;">'text'</span>)<br>ann.annotate(doc)<br>println doc.<span style="color:#9876aa;">keywords</span>.collect<span style="font-weight:bold;">{  </span>k <span style="font-weight:bold;">-&gt; </span><span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>k.<span style="color:#9876aa;">facet </span>- <span style="color:#6a8759;">'word.'</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">(</span>$<span style="font-weight:bold;">{</span>k.<span style="color:#9876aa;">str</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">)" </span><span style="font-weight:bold;">}</span>.join(<span style="color:#6a8759;">' '</span>)<br></pre><p>When run, we see the following output:</p>
<pre>PRP(I) VBP(eat) NN(sushi) IN(with) NNS(chopsticks) .(.)</pre>
<p>The annotations, also known as tags or facets, for this example are as follows:</p>

<table style="border:1px solid gray; margin:5px;">
<tbody><tr style="color:#9876aa;"><td style="padding:5px;">PRP</td><td style="padding:5px;">Personal pronoun</td></tr>
<tr><td style="padding:5px;">VBP</td><td style="padding:5px;">Present tense verb</td></tr>
<tr style="color:#9876aa;"><td style="padding:5px;">NN</td><td style="padding:5px;">Noun, singular</td></tr>
<tr><td style="padding:5px;">IN</td><td style="padding:5px;">Preposition</td></tr>
<tr style="color:#9876aa;"><td style="padding:5px;">NNS</td><td style="padding:5px;">Noun, plural</td></tr>
</tbody></table>

<p>The documentation for the libraries we are using give a more complete list of such annotations.</p><p>A nice aspect of this library is support for other languages, in particular, Japanese. The code is very similar but uses a different annotator:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;">doc = <span style="color:#cc7832;">new </span>DefaultDocument()<br>doc.putAttribute(<span style="color:#6a8759;">'text'</span>, <span style="color:#6a8759;">'</span><span style="color:#6a8759;font-family:'Courier New',monospace;">私は学校に行きました。</span><span style="color:#6a8759;">'</span>)<br>ann = <span style="color:#cc7832;">new </span>KuromojiAnnotator()<br>ann.setProperty(<span style="color:#6a8759;">'target'</span>, <span style="color:#6a8759;">'text'</span>)<br>ann.annotate(doc)<br>println doc.<span style="color:#9876aa;">keywords</span>.collect<span style="font-weight:bold;">{ </span>k <span style="font-weight:bold;">-&gt; </span><span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>k.<span style="color:#9876aa;">facet</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">(</span>$<span style="font-weight:bold;">{</span>k.<span style="color:#9876aa;">str</span><span style="font-weight:bold;">}</span><span style="color:#6a8759;">)" </span><span style="font-weight:bold;">}</span>.join(<span style="color:#6a8759;">' '</span>)<br></pre>
<p>When run, we see the following output:</p>
<pre>名詞(私) 助詞(は) 名詞(学校) 助詞(に) 動詞(行き) 助動詞(まし) 助動詞(た) 記号(。)</pre>
<p>Before progressing, we'll highlight the result visualization capabilities of the GroovyConsole. This feature lets us write a small Groovy script which converts results to any swing component. In our case we'll convert lists of annotated strings to a <code>JLabel</code> component containing HTML including colored annotation boxes. The details aren't included here but can be found in the <a href="https://github.com/paulk-asert/groovy-data-science/blob/master/subprojects/LanguageProcessing/src/main/resources/OutputTransforms.groovy" target="_blank">repo</a>. We need to copy that file into our <code>~/.groovy</code> folder and then enable script visualization as shown here:</p>
<p><img src="https://blogs.apache.org/groovy/mediaresource/dab9114e-95d6-4dd6-a294-76be3d2e3a47" style="width:80%;" alt="Screenshot from 2022-08-04 21-57-35.png"></p>
<p>Then we should see the following when running the script:</p>
<p><img src="https://blogs.apache.org/groovy/mediaresource/8ed6c774-f2a5-40d9-94ac-89ecbf56132d" style="width:100%;" alt="Screenshot from 2022-08-04 21-59-47.png"></p>
<p>The visualization is purely optional but adds a nice touch. If using Groovy in notebook environments like Jupyter/BeakerX, there might be visualization tools in those environments too.</p>
<p>Let's look at a larger example using the <a href="https://haifengl.github.io/" target="_blank">Smile</a> library.</p>
<p>First, the sentences that we'll examine:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>sentences = [<br>    <span style="color:#6a8759;">'Paul has two sisters, Maree and Christine.'</span>,<br>    <span style="color:#6a8759;">'No wise fish would go anywhere without a porpoise'</span>,<br>    <span style="color:#6a8759;">'His bark was much worse than his bite'</span>,<br>    <span style="color:#6a8759;">'Turn on the lights to the main bedroom'</span>,<br>    <span style="color:#6a8759;">"Light 'em all up"</span>,<br>    <span style="color:#6a8759;">'Make it dark downstairs'<br></span>]<br></pre>
<p>A couple of those sentences might seem a little strange but they are selected to show off quite a few of the different POS tags.</p><p>Smile has a tokenizer class which splits a sentence into words. It handles numerous cases like contractions and abbreviations ("e.g.", "'tis", "won't"). Smile also has a POS class based on the&nbsp;hidden Markov model and a built-in model is used for that class. Here is our code using those classes:</p>
<pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>tokenizer = <span style="color:#cc7832;">new </span>SimpleTokenizer(<span style="color:#cc7832;">true</span>)<br>sentences.each <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>tokens = Arrays.<span style="color:#9876aa;font-style:italic;">stream</span>(tokenizer.split(it)).toArray(String[]::<span style="color:#cc7832;">new</span>)<br>    <span style="color:#cc7832;">def </span>tags = HMMPOSTagger.<span style="color:#9876aa;font-style:italic;">default</span>.tag(tokens)*.toString()<br>    println tokens.<span style="color:#9876aa;">indices</span>.collect<span style="font-weight:bold;">{</span>tags[it] == tokens[it] ? tags[it] : <span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>tags[it]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">(</span>$<span style="font-weight:bold;">{</span>tokens[it]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">)" </span><span style="font-weight:bold;">}</span>.join(<span style="color:#6a8759;">' '</span>)<br><span style="font-weight:bold;">}<br></span></pre><p>We run the tokenizer for each sentence. Each token is then displayed directly or with its tag if it has one.</p><p>Running the script gives this visualization:</p>

<p></p><table style="background-color: white; margin: 5px; border: 1px solid gray"><tbody><tr><td style="padding: 5px;">
  <table><tbody><tr><td style="padding: 5px; text-align: center; "><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Paul</span><br>
        <span style="color:white;">NNP</span></div></td><td style="padding: 5px; text-align: center;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">has</span><br>
        <span style="color:white;">VBZ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#DF401C;">
        <span style="background-color:white; color:#DF401C;">two</span><br>
        <span style="color:white;">CD</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">sisters</span><br>
        <span style="color:white;">NNS</span></div></td><td style="text-align: center; padding: 5px;">, </td><td style="padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Maree</span><br>
        <span style="color:white;">NNP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">and</span><br>
        <span style="color:white;">CC</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Christine</span><br>
        <span style="color:white;">NNP</span></div></td><td style="text-align: center; padding: 5px;">.</td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#895C9F;">
        <span style="background-color:white; color:#895C9F;">No</span><br>
        <span style="color:white;">DT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">wise</span><br>
        <span style="color:white;">JJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">fish</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#FC5F00;">
        <span style="background-color:white; color:#FC5F00;">would</span><br>
        <span style="color:white;">MD</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">go</span><br>
        <span style="color:white;">VB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">anywhere</span><br>
        <span style="color:white;">RB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">without</span><br>
        <span style="color:white;">IN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#895C9F;">
        <span style="background-color:white; color:#895C9F;">a</span><br>
        <span style="color:white;">DT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">porpoise</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#CD853F;">
        <span style="background-color:white; color:#CD853F;">His</span><br>
        <span style="color:white;">PRP$</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">bark</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#8B4513;">
        <span style="background-color:white; color:#8B4513;">was</span><br>
        <span style="color:white;">VBD</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">much</span><br>
        <span style="color:white;">RB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#57411B;">
        <span style="background-color:white; color:#57411B;">worse</span><br>
        <span style="color:white;">JJR</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">than</span><br>
        <span style="color:white;">IN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#CD853F;">
        <span style="background-color:white; color:#CD853F;">his</span><br>
        <span style="color:white;">PRP$</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">bite</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">Turn</span><br>
        <span style="color:white;">VB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">on</span><br>
        <span style="color:white;">IN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#895C9F;">
        <span style="background-color:white; color:#895C9F;">the</span><br>
        <span style="color:white;">DT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">lights</span><br>
        <span style="color:white;">NNS</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">to</span><br>
        <span style="color:white;">TO</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#895C9F;">
        <span style="background-color:white; color:#895C9F;">the</span><br>
        <span style="color:white;">DT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">main</span><br>
        <span style="color:white;">JJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">bedroom</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Light</span><br>
        <span style="color:white;">NNP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">'em</span><br>
        <span style="color:white;">PRP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">all</span><br>
        <span style="color:white;">RB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">up</span><br>
        <span style="color:white;">RB</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">Make</span><br>
        <span style="color:white;">VB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">it</span><br>
        <span style="color:white;">PRP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">dark</span><br>
        <span style="color:white;">JJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">downstairs</span><br>
        <span style="color:white;">NN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
  </td></tr></tbody></table><p></p>

<p>[Note: the scripts in the repo just print to stdout which is perfect when using the command-line or IDEs. The visualization in the GoovyConsole kicks in only for the actual result. So, if you are following along at home and wanting to use the GroovyConsole, you'd change the <code>each</code> to <code>collect</code> and remove the <code>println</code>, and you should be good for visualization.]</p><p>The OpenNLP code is very similar:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>tokenizer = SimpleTokenizer.<span style="color:#9876aa;font-style:italic;">INSTANCE<br></span>sentences.each <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span>String[] tokens = tokenizer.tokenize(it)<br>    <span style="color:#cc7832;">def </span>posTagger = <span style="color:#cc7832;">new </span>POSTaggerME(<span style="color:#6a8759;">'en'</span>)<br>    String[] tags = posTagger.tag(tokens)<br>    println tokens.<span style="color:#9876aa;">indices</span>.collect<span style="font-weight:bold;">{</span>tags[it] == tokens[it] ? tags[it] : <span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>tags[it]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">(</span>$<span style="font-weight:bold;">{</span>tokens[it]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">)" </span><span style="font-weight:bold;">}</span>.join(<span style="color:#6a8759;">' '</span>)<br><span style="font-weight:bold;">}<br></span></pre><p>OpenNLP allows you to supply your own POS model but downloads a default one if none is specified.</p><p>When the script is run, it has this visualization:</p>
<p></p><table style="background-color: white; margin:5px; border: 1px solid gray;"><tbody><tr><td style="padding: 5px;">
  <table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Paul</span><br>
        <span style="color:white;">PROPN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">has</span><br>
        <span style="color:white;">VERB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#DF401C;">
        <span style="background-color:white; color:#DF401C;">two</span><br>
        <span style="color:white;">NUM</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">sisters</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">,</span><br>
        <span style="color:white;">PUNCT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Maree</span><br>
        <span style="color:white;">PROPN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#895C9F;">
        <span style="background-color:white; color:#895C9F;">and</span><br>
        <span style="color:white;">CCONJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Christine</span><br>
        <span style="color:white;">PROPN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">.</span><br>
        <span style="color:white;">PUNCT</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">No</span><br>
        <span style="color:white;">DET</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">wise</span><br>
        <span style="color:white;">ADJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">fish</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#FC5F00;">
        <span style="background-color:white; color:#FC5F00;">would</span><br>
        <span style="color:white;">AUX</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">go</span><br>
        <span style="color:white;">VERB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">anywhere</span><br>
        <span style="color:white;">ADV</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">without</span><br>
        <span style="color:white;">ADP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">a</span><br>
        <span style="color:white;">DET</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">porpoise</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">His</span><br>
        <span style="color:white;">PRON</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">bark</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#FC5F00;">
        <span style="background-color:white; color:#FC5F00;">was</span><br>
        <span style="color:white;">AUX</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">much</span><br>
        <span style="color:white;">ADV</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">worse</span><br>
        <span style="color:white;">ADJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">than</span><br>
        <span style="color:white;">ADP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">his</span><br>
        <span style="color:white;">PRON</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">bite</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">Turn</span><br>
        <span style="color:white;">VERB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">on</span><br>
        <span style="color:white;">ADP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">the</span><br>
        <span style="color:white;">DET</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">lights</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">to</span><br>
        <span style="color:white;">ADP</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6AA4;">
        <span style="background-color:white; color:#5B6AA4;">the</span><br>
        <span style="color:white;">DET</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">main</span><br>
        <span style="color:white;">ADJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">bedroom</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">Light</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">'</span><br>
        <span style="color:white;">PUNCT</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">em</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#561B06;">
        <span style="background-color:white; color:#561B06;">all</span><br>
        <span style="color:white;">ADV</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#32CD32;">
        <span style="background-color:white; color:#32CD32;">up</span><br>
        <span style="color:white;">ADP</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
<table><tbody><tr><td style="padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">Make</span><br>
        <span style="color:white;">VERB</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0000CD;">
        <span style="background-color:white; color:#0000CD;">it</span><br>
        <span style="color:white;">PRON</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#5B6633;">
        <span style="background-color:white; color:#5B6633;">dark</span><br>
        <span style="color:white;">ADJ</span></div></td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">downstairs</span><br>
        <span style="color:white;">NOUN</span></div></td><td style="text-align: center; padding: 5px;"></td></tr></tbody></table>
  </td></tr></tbody></table>

<p>The observant reader may have noticed some slight differences in the tags used in this library. They are essentially the same but using slightly different names. This is something to be aware of when swapping between POS libraries or models. Make sure you look up the documentation for the library/model you are using to understand the available tag types.</p>

<h3>Entity Detection</h3>

<p>Named entity recognition (NER), seeks to identity and classify named entities in text. Categories of interest might be persons, organizations, locations dates, etc. It is another technology used in many fields of NLP.</p><p>We'll start with our sentences to analyse:</p>
<pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;">String[] sentences = [<br>    <span style="color:#6a8759;">"A commit by Daniel Sun on December 6, 2020 improved Groovy 4's language integrated query."</span>,<br>    <span style="color:#6a8759;">"A commit by Daniel on Sun., December 6, 2020 improved Groovy 4's language integrated query."</span>,<br>    <span style="color:#6a8759;">'The Groovy in Action book by Dierk Koenig et. al. is a bargain at $50, or indeed any price.'</span>,<br>    <span style="color:#6a8759;">'The conference wrapped up yesterday at 5:30 p.m. in Copenhagen, Denmark.'</span>,<br>    <span style="color:#6a8759;">'I saw Ms. May Smith waving to June Jones.'</span>,<br>    <span style="color:#6a8759;">'The parcel was passed from May to June.'</span>,<br>    <span style="color:#6a8759;">'The Mona Lisa by Leonardo da Vinci has been on display in the Louvre, Paris since 1797.'<br></span>]<br></pre><p>We'll use some well-known models, we'll focus on the&nbsp;<i>person</i>, <i>money</i>, <i>date</i>, <i>time</i>, and <i>location</i>&nbsp;models:</p>
<pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>base = <span style="color:#6a8759;">'http://opennlp.sourceforge.net/models-1.5'<br></span><span style="color:#cc7832;">def </span>modelNames = [<span style="color:#6a8759;">'person'</span>, <span style="color:#6a8759;">'money'</span>, <span style="color:#6a8759;">'date'</span>, <span style="color:#6a8759;">'time'</span>, <span style="color:#6a8759;">'location'</span>]<br><span style="color:#cc7832;">def </span>finders = modelNames.collect <span style="font-weight:bold;">{ </span>model <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">new </span>NameFinderME(DownloadUtil.<span style="color:#9876aa;font-style:italic;">downloadModel</span>(<span style="color:#cc7832;">new </span>URL(<span style="color:#6a8759;">"</span>$base<span style="color:#6a8759;">/en-ner-</span>$<span style="font-weight:bold;">{</span>model<span style="font-weight:bold;">}</span><span style="color:#6a8759;">.bin"</span>), TokenNameFinderModel))<br><span style="font-weight:bold;">}<br></span></pre><p>We'll now tokenize our sentences:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>tokenizer = SimpleTokenizer.<span style="color:#9876aa;font-style:italic;">INSTANCE<br></span>sentences.each <span style="font-weight:bold;">{ </span>sentence <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span>String[] tokens = tokenizer.tokenize(sentence)<br>    Span[] tokenSpans = tokenizer.tokenizePos(sentence)<br>    <span style="color:#cc7832;">def </span>entityText = [:]<br>    <span style="color:#cc7832;">def </span>entityPos = [:]<br>    finders.<span style="color:#9876aa;">indices</span>.each <span style="font-weight:bold;">{</span>fi <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">        </span><span style="color:#808080;">// could be made smarter by looking at probabilities and overlapping spans<br></span><span style="color:#808080;">        </span>Span[] spans = finders[fi].find(tokens)<br>        spans.each<span style="font-weight:bold;">{</span>span <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">            </span><span style="color:#cc7832;">def </span>se = span.<span style="color:#9876aa;">start</span>..&lt;span.<span style="color:#9876aa;">end<br></span><span style="color:#9876aa;">            </span><span style="color:#cc7832;">def </span>pos = (tokenSpans[se.<span style="color:#9876aa;">from</span>].<span style="color:#9876aa;">start</span>)..&lt;(tokenSpans[se.<span style="color:#9876aa;">to</span>].<span style="color:#9876aa;">end</span>)<br>            entityPos[span.<span style="color:#9876aa;">start</span>] = pos<br>            entityText[span.<span style="color:#9876aa;">start</span>] = <span style="color:#6a8759;">"</span>$span.<span style="color:#9876aa;">type</span><span style="color:#6a8759;">(</span>$<span style="font-weight:bold;">{</span>sentence[pos]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">)"<br></span><span style="color:#6a8759;">        </span><span style="font-weight:bold;">}<br></span><span style="font-weight:bold;">    }<br></span><span style="font-weight:bold;">    </span>entityPos.keySet().sort().reverseEach <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">        </span><span style="color:#cc7832;">def </span>pos = entityPos[it]<br>        <span style="color:#cc7832;">def </span>(from, to) = [pos.from, pos.to + <span style="color:#6897bb;">1</span>]<br>        sentence = sentence[<span style="color:#6897bb;">0</span>..&lt;from] + entityText[it] + sentence[to..-<span style="color:#6897bb;">1</span>]<br>    <span style="font-weight:bold;">}<br></span><span style="font-weight:bold;">    </span>println sentence<br><span style="font-weight:bold;">}<br></span></pre><p>And when visualized, shows this:</p>

<p></p><table style="border:1px solid grey; margin:5px; background-color:white"><tbody><tr><td>
  <table style="margin:5px;"><tbody><tr><td style="padding:5px;">A commit by </td><td style="text-align:center;"><div style="padding:5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Daniel Sun</span><br>
        <span style="color:white;">person</span></div></td><td style="text-align: center; padding:5px;">on </td><td style="text-align:center;"><div style="padding:5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">December 6, 2020</span><br>
        <span style="color:white;">date</span></div></td><td style="text-align: center; padding:5px;">improved Groovy 4's language integrated query.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="text-align: center; padding:5px;">A commit by </td><td style="text-align: center;"><div style="padding:5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Daniel</span><br>
        <span style="color:white;">person</span></div></td><td style="text-align:center; padding:5px;">on Sun., </td><td style="text-align:center;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">December 6, 2020</span><br>
        <span style="color:white;">date</span></div></td><td style="text-align: center; padding:5px;">improved Groovy 4's language integrated query.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="text-align: center; padding:5px;">The Groovy in Action book by </td><td style="text-align: center;"><div style="padding:5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Dierk Koenig</span><br>
        <span style="color:white;">person</span></div></td><td style="text-align: center; padding:5px;">et. al. is a bargain at </td><td style="text-align:center;"><div style="padding:5px; background-color:#DF401C;">
        <span style="background-color:white; color:#DF401C;">$50</span><br>
        <span style="color:white;">money</span></div></td><td style="text-align: center; padding:5px;">, or indeed any price.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="text-align: center; padding:5px;">The conference wrapped up </td><td style="text-align: center;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">yesterday</span><br>
        <span style="color:white;">date</span></div></td><td style="text-align: center; padding:5px;">at </td><td style="text-align:center;"><div style="padding:5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">5:30 p.m.</span><br>
        <span style="color:white;">time</span></div></td><td style="text-align: center; padding:5px;">in </td><td style="text-align: center;"><div style="padding:5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">Copenhagen</span><br>
        <span style="color:white;">location</span></div></td><td style="padding:5px;">, </td><td style="text-align:center;"><div style="padding: 5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">Denmark</span><br>
        <span style="color:white;">location</span></div></td><td style="padding:5px;">.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="padding:5px;">I saw Ms. </td><td style="text-align:center;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">May Smith</span><br>
        <span style="color:white;">person</span></div></td><td style="text-align: center; padding:5px;">waving to </td><td style="text-align:center;"><div style="padding:5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">June Jones</span><br>
        <span style="color:white;">person</span></div></td><td style="text-align: center; padding:5px;">.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="padding:5px;">The parcel was passed from </td><td style="text-align:center;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">May to June</span><br>
        <span style="color:white;">date</span></div></td><td style="padding:5px;">.</td></tr></tbody></table>
<table style="margin:5px;"><tbody><tr><td style="padding:5px;">The Mona Lisa by </td><td style="text-align:center;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Leonardo da Vinci</span><br>
        <span style="color:white;">person</span></div></td><td style="padding:5px;">has been on display in the Louvre, </td><td style="text-align:center;"><div style="padding:5px; background-color:#C54AA8;">
        <span style="background-color:white; color:#C54AA8;">Paris</span><br>
        <span style="color:white;">location</span></div></td><td style="text-align:center; padding:5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">since 1797</span><br>
        <span style="color:white;">date</span></div></td><td>.</td></tr></tbody></table>
  </td></tr></tbody></table><p></p>
<p>We can see here that most examples have been categorized as we might expect. We'd have to improve our model for it to do a better job on the "May to June" example.</p>

<h3>Scaling Entity Detection</h3>

<p>We can also run our named entity detection algorithms on platforms like <a href="http://nlp.johnsnowlabs.com/" target="_blank">Spark NLP</a> which adds NLP functionality to <a href="https://spark.apache.org/" target="_blank">Apache Spark</a>. We'll use <a href="https://nlp.johnsnowlabs.com/2020/01/22/glove_100d.html" target="_blank">glove_100d</a> embeddings and the <a href="https://nlp.johnsnowlabs.com/2020/02/03/onto_100_en.html" target="_blank">onto_100</a> NER model.</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">var </span>assembler = <span style="color:#cc7832;">new </span>DocumentAssembler(<span style="color:#6a8759;">inputCol</span>: <span style="color:#6a8759;">'text'</span>, <span style="color:#6a8759;">outputCol</span>: <span style="color:#6a8759;">'document'</span>, <span style="color:#6a8759;">cleanupMode</span>: <span style="color:#6a8759;">'disabled'</span>)<br><br><span style="color:#cc7832;">var </span>tokenizer = <span style="color:#cc7832;">new </span>Tokenizer(<span style="color:#6a8759;">inputCols</span>: [<span style="color:#6a8759;">'document'</span>] <span style="color:#cc7832;">as </span>String[], <span style="color:#6a8759;">outputCol</span>: <span style="color:#6a8759;">'token'</span>)<br><br><span style="color:#cc7832;">var </span>embeddings = WordEmbeddingsModel.<span style="color:#9876aa;font-style:italic;">pretrained</span>(<span style="color:#6a8759;">'glove_100d'</span>).tap <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span><span style="color:#9876aa;">inputCols </span>= [<span style="color:#6a8759;">'document'</span>, <span style="color:#6a8759;">'token'</span>] <span style="color:#cc7832;">as </span>String[]<br>    <span style="color:#9876aa;">outputCol </span>= <span style="color:#6a8759;">'embeddings'<br></span><span style="font-weight:bold;">}<br></span><span style="font-weight:bold;"><br></span><span style="color:#cc7832;">var </span>model = NerDLModel.<span style="color:#9876aa;font-style:italic;">pretrained</span>(<span style="color:#6a8759;">'onto_100'</span>, <span style="color:#6a8759;">'en'</span>).tap <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span><span style="color:#9876aa;">inputCols </span>= [<span style="color:#6a8759;">'document'</span>, <span style="color:#6a8759;">'token'</span>, <span style="color:#6a8759;">'embeddings'</span>] <span style="color:#cc7832;">as </span>String[]<br>    <span style="color:#9876aa;">outputCol </span>=<span style="color:#6a8759;">'ner'<br></span><span style="font-weight:bold;">}<br></span><span style="font-weight:bold;"><br></span><span style="color:#cc7832;">var </span>converter = <span style="color:#cc7832;">new </span>NerConverter(<span style="color:#6a8759;">inputCols</span>: [<span style="color:#6a8759;">'document'</span>, <span style="color:#6a8759;">'token'</span>, <span style="color:#6a8759;">'ner'</span>] <span style="color:#cc7832;">as </span>String[], <span style="color:#6a8759;">outputCol</span>: <span style="color:#6a8759;">'ner_chunk'</span>)<br><br><span style="color:#cc7832;">var </span>pipeline = <span style="color:#cc7832;">new </span>Pipeline(<span style="color:#6a8759;">stages</span>: [assembler, tokenizer, embeddings, model, converter] <span style="color:#cc7832;">as </span>PipelineStage[])<br><br><span style="color:#cc7832;">var </span>spark = SparkNLP.<span style="color:#9876aa;font-style:italic;">start</span>(<span style="color:#cc7832;">false</span>, <span style="color:#cc7832;">false</span>, <span style="color:#6a8759;">'16G'</span>, <span style="color:#6a8759;">''</span>, <span style="color:#6a8759;">''</span>, <span style="color:#6a8759;">''</span>)<br><br><span style="color:#cc7832;">var </span>text = [<br>    <span style="color:#6a8759;">"The Mona Lisa is a 16th century oil painting created by Leonardo. It's held at the Louvre in Paris."<br></span>]<br><span style="color:#cc7832;">var </span>data = spark.createDataset(text, Encoders.<span style="color:#9876aa;font-style:italic;">STRING</span>()).toDF(<span style="color:#6a8759;">'text'</span>)<br><br><span style="color:#cc7832;">var </span>pipelineModel = pipeline.fit(data)<br><br><span style="color:#cc7832;">var </span>transformed = pipelineModel.transform(data)<br>transformed.show()<br><br>use(SparkCategory) <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span>transformed.collectAsList().each <span style="font-weight:bold;">{ </span>row <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">        </span><span style="color:#cc7832;">def </span>res =  row.text<br>        <span style="color:#cc7832;">def </span>chunks = row.ner_chunk.reverseIterator()<br>        <span style="color:#cc7832;">while </span>(chunks.hasNext()) {<br>            <span style="color:#cc7832;">def </span>chunk = chunks.next()<br>            <span style="color:#cc7832;">int </span>begin = chunk.begin<br>            <span style="color:#cc7832;">int </span>end = chunk.end<br>            <span style="color:#cc7832;">def </span>entity = chunk.metadata.get(<span style="color:#6a8759;">'entity'</span>).get()<br>            res = res[<span style="color:#6897bb;">0</span>..&lt;begin] + <span style="color:#6a8759;">"</span>$entity<span style="color:#6a8759;">(</span>$chunk.result<span style="color:#6a8759;">)" </span>+ res[end&lt;..-<span style="color:#6897bb;">1</span>]<br>        }<br>        println res<br>    <span style="font-weight:bold;">}<br></span><span style="font-weight:bold;">}<br></span></pre><p>We won't go into all of the details here. In summary, the code sets up a pipeline that transforms our input sentences, via a series of steps, into chunks, where each chunk corresponds to a detected entity. Each chunk has a start and ending position, and an associated tag type.</p><p>This may not seem like it is much different to our earlier examples, but if we had large volumes of data and we were running in a large cluster, the work could be spread across worker nodes within the cluster.</p>
<p>Here we have used a utility <code>SparkCategory</code> class which makes accessing the information in Spark <code>Row</code> instances a little nicer in terms of Groovy shorthand syntax. We can use <code>row.text</code> instead of <code>row.get(row.fieldIndex('text'))</code>. Here is the code for this utility class:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">class </span>SparkCategory {<br>    <span style="color:#cc7832;">static </span>get(Row r, String field) { r.get(r.fieldIndex(field)) }<br>}<br></pre>
<p>If doing more than this simple example, the use of <code>SparkCategory</code> could be made implicit through various standard Groovy techniques.</p>
<p>When we run our script, we see the following output:</p>
<pre>22/08/07 12:31:39 INFO SparkContext: Running Spark version 3.3.0
...
glove_100d download started this may take some time.
Approximate size to download 145.3 MB
...
onto_100 download started this may take some time.
Approximate size to download 13.5 MB
...
+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+
|                text|            document|               token|          embeddings|                 ner|           ner_chunk|
+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+
|The Mona Lisa is ...|[{document, 0, 98...|[{token, 0, 2, Th...|[{word_embeddings...|[{named_entity, 0...|[{chunk, 0, 12, T...|
+--------------------+--------------------+--------------------+--------------------+--------------------+--------------------+
PERSON(The Mona Lisa) is a DATE(16th century) oil painting created by PERSON(Leonardo). It's held at the FAC(Louvre) in GPE(Paris).
</pre>
<p>The result has the following visualization:</p>

  <p></p><table style="border:1px solid grey; margin:5px; background-color:white;"><tbody><tr><td style="text-align: center; padding: 5px;">
  <table style="margin:5px;"><tbody><tr><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">The Mona Lisa</span><br>
        <span style="color:white;">PERSON</span></div></td><td style="text-align: center; padding: 5px;">is a </td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#2B5F19;">
        <span style="background-color:white; color:#2B5F19;">16th century</span><br>
        <span style="color:white;">DATE</span></div></td><td style="text-align: center; padding: 5px;">oil painting created by </td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#0088FF;">
        <span style="background-color:white; color:#0088FF;">Leonardo</span><br>
        <span style="color:white;">PERSON</span></div></td><td style="text-align: center; padding: 5px;">. It's held at the </td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#DF401C;">
        <span style="background-color:white; color:#DF401C;">Louvre</span><br>
        <span style="color:white;">FAC</span></div></td><td style="text-align: center; padding: 5px;">in </td><td style="text-align: center; padding: 5px;"><div style="padding: 5px; background-color:#A4772B;">
        <span style="background-color:white; color:#A4772B;">Paris</span><br>
        <span style="color:white;">GPE</span></div></td><td style="text-align: center; padding: 5px;">.</td></tr></tbody></table>
  </td></tr></tbody></table><p></p>

<p>Here FAC is facility (buildings, airports, highways, bridges, etc.) and GPE is Geo-Political Entity (countries, cities, states, etc.).</p>

<h3>Sentence Detection</h3>

<p>Detecting sentences in text might seem a simple concept at first but there are numerous special cases.</p><p>Consider the following text:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>text = <span style="color:#6a8759;">'''<br></span><span style="color:#6a8759;">The most referenced scientific paper of all time is "Protein measurement with the<br></span><span style="color:#6a8759;">Folin phenol reagent" by Lowry, O. H., Rosebrough, N. J., Farr, A. L. &amp; Randall,<br></span><span style="color:#6a8759;">R. J. and was published in the J. BioChem. in 1951. It describes a method for<br></span><span style="color:#6a8759;">measuring the amount of protein (even as small as 0.2 γ, were γ is the specific<br></span><span style="color:#6a8759;">weight) in solutions and has been cited over 300,000 times and can be found here:<br></span><span style="color:#6a8759;">https://www.jbc.org/content/193/1/265.full.pdf. Dr. Lowry completed<br></span><span style="color:#6a8759;">two doctoral degrees under an M.D.-Ph.D. program from the University of Chicago<br></span><span style="color:#6a8759;">before moving to Harvard under A. Baird Hastings. He was also the H.O.D of<br></span><span style="color:#6a8759;">Pharmacology at Washington University in St. Louis for 29 years.<br></span><span style="color:#6a8759;">'''<br></span></pre><p>There are full stops at the end of each sentence (though in general, it could also be other punctuation like exclamation marks and question marks). There are also full stops and decimal points in abbreviations, URLs, decimal numbers and so forth. Sentence detection algorithms might have some special hard-coded cases, like "Dr.", "Ms.", or in an emoticon, and may also use some heuristics. In general, they might also be trained with examples like above.</p><p>Here is some code for OpenNLP for detecting sentences in the above:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>helper = <span style="color:#cc7832;">new </span>ResourceHelper(<span style="color:#6a8759;">'http://opennlp.sourceforge.net/models-1.5'</span>)<br><span style="color:#cc7832;">def </span>model = <span style="color:#cc7832;">new </span>SentenceModel(helper.load(<span style="color:#6a8759;">'en-sent'</span>))<br><span style="color:#cc7832;">def </span>detector = <span style="color:#cc7832;">new </span>SentenceDetectorME(model)<br><span style="color:#cc7832;">def </span>sentences = detector.sentDetect(text)<br><span style="color:#cc7832;">assert </span>text.count(<span style="color:#6a8759;">'.'</span>) == <span style="color:#6897bb;">28<br></span><span style="color:#cc7832;">assert </span>sentences.size() == <span style="color:#6897bb;">4<br></span>println <span style="color:#6a8759;">"Found </span>$<span style="font-weight:bold;">{</span>sentences.size()<span style="font-weight:bold;">}</span><span style="color:#6a8759;"> sentences:</span><span style="color:#cc7832;">\n</span><span style="color:#6a8759;">" </span>+ sentences.join(<span style="color:#6a8759;">'</span><span style="color:#cc7832;">\n\n</span><span style="color:#6a8759;">'</span>)<br></pre><p>It has the following output:</p>
<pre><span style="color:#D02020;">Downloading en-sent</span>
Found 4 sentences:
The most referenced scientific paper of all time is "Protein measurement with the
Folin phenol reagent" by Lowry, O. H., Rosebrough, N. J., Farr, A. L. &amp; Randall,
R. J. and was published in the J. BioChem. in 1951.

It describes a method for
measuring the amount of protein (even as small as 0.2 γ, were γ is the specific
weight) in solutions and has been cited over 300,000 times and can be found here:
https://www.jbc.org/content/193/1/265.full.pdf.

Dr. Lowry completed
two doctoral degrees under an M.D.-Ph.D. program from the University of Chicago
before moving to Harvard under A. Baird Hastings.

He was also the H.O.D of
Pharmacology at Washington University in St. Louis for 29 years.</pre>
<p>We can see here, it handled all of the tricky cases in the example.</p>

<h3>Relationship Extraction with Triples</h3>

<p>The next step after detecting named entities and the various parts of speech of certain words is to explore relationships between them. This is often done in the form of <i>subject-predicate-object</i> triplets. In our earlier NER example, for the sentence "<span style="background-color: rgb(245, 245, 245); color: rgb(51, 51, 51); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px;">The conference wrapped up yesterday at 5:30 p.m. in Copenhagen, Denmark.</span>", we found various date, time and location named entities.</p><p>We can extract triples using the <a href="https://github.com/uma-pi1/minie" target="_blank">MinIE library</a> (which in turns uses the Standford CoreNLP library) with the following code:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>parser = CoreNLPUtils.<span style="color:#9876aa;font-style:italic;">StanfordDepNNParser</span>()<br>sentences.each <span style="font-weight:bold;">{ </span>sentence <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>minie = <span style="color:#cc7832;">new </span>MinIE(sentence, parser, MinIE.Mode.<span style="color:#9876aa;font-style:italic;">SAFE</span>)<br><br>    println <span style="color:#6a8759;">"</span><span style="color:#cc7832;">\n</span><span style="color:#6a8759;">Input sentence: </span>$sentence<span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">    </span>println <span style="color:#6a8759;">'============================='<br></span><span style="color:#6a8759;">    </span>println <span style="color:#6a8759;">'Extractions:'<br></span><span style="color:#6a8759;">    </span><span style="color:#cc7832;">for </span>(ap <span style="color:#cc7832;">in </span>minie.<span style="color:#9876aa;">propositions</span>) {<br>        println <span style="color:#6a8759;">"</span><span style="color:#cc7832;">\t</span><span style="color:#6a8759;">Triple: </span>$ap.<span style="color:#9876aa;">tripleAsString</span><span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">        </span><span style="color:#cc7832;">def </span>attr = ap.<span style="color:#9876aa;">attribution</span>.<span style="color:#9876aa;">attributionPhrase </span>? ap.<span style="color:#9876aa;">attribution</span>.toStringCompact() : <span style="color:#6a8759;">'NONE'<br></span><span style="color:#6a8759;">        </span>println <span style="color:#6a8759;">"</span><span style="color:#cc7832;">\t</span><span style="color:#6a8759;">Factuality: </span>$ap.<span style="color:#9876aa;">factualityAsString</span><span style="color:#cc7832;">\t</span><span style="color:#6a8759;">Attribution: </span>$attr<span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">        </span>println <span style="color:#6a8759;">'</span><span style="color:#cc7832;">\t</span><span style="color:#6a8759;">----------'<br></span><span style="color:#6a8759;">    </span>}<br><span style="font-weight:bold;">}<br></span></pre><p>The output for the previously mentioned sentence is shown below:</p>
<pre>Input sentence: The conference wrapped up yesterday at 5:30 p.m. in Copenhagen, Denmark.
=============================
Extractions:
        Triple: "conference"    "wrapped up yesterday at"       "5:30 p.m."
        Factuality: (+,CT)      Attribution: NONE
        ----------
        Triple: "conference"    "wrapped up yesterday in"       "Copenhagen"
        Factuality: (+,CT)      Attribution: NONE
        ----------
        Triple: "conference"    "wrapped up"    "yesterday"
        Factuality: (+,CT)      Attribution: NONE
</pre>
<p>We can now piece together the relationships between the earlier entities we detected.</p><p>There was also a problematic case amongst the earlier NER examples, "<span style="background-color: rgb(245, 245, 245); color: rgb(51, 51, 51); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px;">The parcel was passed from May to June.</span>". Using the previous model, detected "<span style="background-color: rgb(245, 245, 245); color: rgb(51, 51, 51); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13px;">May to June</span>" as a <i>date</i>. Let's explore that using CoreNLP's triple extraction directly. We won't show the source code here but CoreNLP supports <a href="https://github.com/paulk-asert/groovy-data-science/blob/master/subprojects/LanguageProcessing/src/main/groovy/DetectTriplesPOS_CoreNLP.groovy" target="_blank">simple</a> and <a href="https://github.com/paulk-asert/groovy-data-science/blob/master/subprojects/LanguageProcessing/src/main/groovy/DetectTriplesAnnotation_CoreNLP.groovy" target="_blank">more powerful</a> approaches to solving this problem. The output for the sentence in question using the more powerful technique is:</p>
<pre>Sentence #7: The parcel was passed from May to June.
root(ROOT-0, passed-4)
det(parcel-2, The-1)
nsubj:pass(passed-4, parcel-2)
aux:pass(passed-4, was-3)
case(May-6, from-5)
obl:from(passed-4, May-6)
case(June-8, to-7)
obl:to(passed-4, June-8)
punct(passed-4, .-9)

Triples:
1.0	parcel	was	passed
1.0	parcel	was passed to	June
1.0	parcel	was	passed from May to June
1.0	parcel	was passed from	May
</pre>
<p>We can see that this has done a better job of piecing together what entities we have and their relationships.</p>
<h3>Sentiment Analysis</h3>

<p>Sentiment analysis is a NLP technique used to determine whether data is positive, negative, or neutral. Standford CoreNLP has default models it uses for this purpose:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>doc = <span style="color:#cc7832;">new </span>Document(<span style="color:#6a8759;">'''<br></span><span style="color:#6a8759;">StanfordNLP is fantastic!<br></span><span style="color:#6a8759;">Groovy is great fun!<br></span><span style="color:#6a8759;">Math can be hard!<br></span><span style="color:#6a8759;">'''</span>)<br><span style="color:#cc7832;">for </span>(sent <span style="color:#cc7832;">in </span>doc.sentences()) {<br>    println <span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>sent.toString().padRight(<span style="color:#6897bb;">40</span>)<span style="font-weight:bold;">} </span>$<span style="font-weight:bold;">{</span>sent.sentiment()<span style="font-weight:bold;">}</span><span style="color:#6a8759;">"<br></span>}<br></pre><p>Which has the following output:</p>
<pre><span style="color:#D02020;">[main] INFO edu.stanford.nlp.parser.common.ParserGrammar - Loading parser from serialized file edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz ... done [0.6 sec].</span>
<span style="color:#C02020;">[main] INFO edu.stanford.nlp.sentiment.SentimentModel - Loading sentiment model edu/stanford/nlp/models/sentiment/sentiment.ser.gz ... done [0.1 sec].</span>
StanfordNLP is fantastic!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; POSITIVE
Groovy is great fun!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VERY_POSITIVE
Math can be hard!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NEUTRAL</pre>
<p>We can also train our own. Let's start with two datasets:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>datasets = [<br>    <span style="color:#6a8759;">positive</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"rt-polarity.pos"</span>).toURI(),<br>    <span style="color:#6a8759;">negative</span>: getClass().<span style="color:#9876aa;">classLoader</span>.getResource(<span style="color:#6a8759;">"rt-polarity.neg"</span>).toURI()<br>]<br></pre><p>We'll first use Datumbox which, as we saw earlier, requires training parameters for our algorithm:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>trainingParams = <span style="color:#cc7832;">new </span>TextClassifier.TrainingParameters(<br>    <span style="color:#6a8759;">numericalScalerTrainingParameters</span>: <span style="color:#cc7832;">null</span>,<br>    <span style="color:#6a8759;">featureSelectorTrainingParametersList</span>: [<span style="color:#cc7832;">new </span>ChisquareSelect.TrainingParameters()],<br>    <span style="color:#6a8759;">textExtractorParameters</span>: <span style="color:#cc7832;">new </span>NgramsExtractor.Parameters(),<br>    <span style="color:#6a8759;">modelerTrainingParameters</span>: <span style="color:#cc7832;">new </span>MultinomialNaiveBayes.TrainingParameters()<br>)<br></pre><p>We now create our algorithm, train it with or training dataset, and for illustrative purposes validate against the training dataset:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>config = Configuration.<span style="color:#9876aa;font-style:italic;">configuration<br></span>TextClassifier classifier = MLBuilder.<span style="color:#9876aa;font-style:italic;">create</span>(trainingParams, config)<br>classifier.fit(datasets)<br><span style="color:#cc7832;">def </span>metrics = classifier.validate(datasets)<br>println <span style="color:#6a8759;">"Classifier Accuracy (using training data): </span>$metrics.<span style="color:#9876aa;">accuracy</span><span style="color:#6a8759;">"<br></span></pre><p>The output is shown here:</p>

<pre><span style="color:#D02020;">[main] INFO com.datumbox.framework.core.common.dataobjects.Dataframe$Builder - Dataset Parsing positive class
[main] INFO com.datumbox.framework.core.common.dataobjects.Dataframe$Builder - Dataset Parsing negative class
...</span>
Classifier Accuracy (using training data): 0.8275959103273615
</pre>

<p>Now we can test our model against several sentences:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;">[<span style="color:#6a8759;">'Datumbox is divine!'</span>, <span style="color:#6a8759;">'Groovy is great fun!'</span>, <span style="color:#6a8759;">'Math can be hard!'</span>].each <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>r = classifier.predict(it)<br>    <span style="color:#cc7832;">def </span>predicted = r.<span style="color:#9876aa;">YPredicted<br></span><span style="color:#9876aa;">    </span><span style="color:#cc7832;">def </span>probability = sprintf <span style="color:#6a8759;">'%4.2f'</span>, r.<span style="color:#9876aa;">YPredictedProbabilities</span>.get(predicted)<br>    println <span style="color:#6a8759;">"Classifing: '</span>$it<span style="color:#6a8759;">',  Predicted: </span>$predicted<span style="color:#6a8759;">,  Probability: </span>$probability<span style="color:#6a8759;">"<br></span><span style="font-weight:bold;">}<br></span></pre><p>Which has this output:</p>
<pre><span style="color:#D02020;">...
[main] INFO com.datumbox.framework.applications.nlp.TextClassifier - predict()
...</span>
Classifing: 'Datumbox is divine!',  Predicted: positive,  Probability: 0.83
Classifing: 'Groovy is great fun!',  Predicted: positive,  Probability: 0.80
Classifing: 'Math can be hard!',  Predicted: negative,  Probability: 0.95
</pre>
<p>We can do the same thing but with OpenNLP. First, we collect our input data. OpenNLP is expecting it in a single dataset with tagged examples:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>trainingCollection = datasets.collect <span style="font-weight:bold;">{ </span>k, v <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">new </span>File(v).readLines().collect<span style="font-weight:bold;">{</span><span style="color:#6a8759;">"</span>$k $it<span style="color:#6a8759;">"</span>.toString() <span style="font-weight:bold;">}<br></span><span style="font-weight:bold;">}</span>.sum()</pre>
<p>Now, we'll train two models. One uses <i>naïve bayes</i>, the other <i>maxent</i>. We train up both variants.</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>variants = [<br>        <span style="color:#6a8759;">Maxent    </span>: <span style="color:#cc7832;">new </span>TrainingParameters(),<br>        <span style="color:#6a8759;">NaiveBayes</span>: <span style="color:#cc7832;">new </span>TrainingParameters((<span style="color:#9876aa;font-style:italic;">CUTOFF_PARAM</span>): <span style="color:#6a8759;">'0'</span>, (<span style="color:#9876aa;font-style:italic;">ALGORITHM_PARAM</span>): <span style="color:#9876aa;font-style:italic;">NAIVE_BAYES_VALUE</span>)<br>]<br><span style="color:#cc7832;">def </span>models = [:]<br>variants.each<span style="font-weight:bold;">{ </span>key, trainingParams <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>trainingStream = <span style="color:#cc7832;">new </span>CollectionObjectStream(trainingCollection)<br>    <span style="color:#cc7832;">def </span>sampleStream = <span style="color:#cc7832;">new </span>DocumentSampleStream(trainingStream)<br>    println <span style="color:#6a8759;">"</span><span style="color:#cc7832;">\n</span><span style="color:#6a8759;">Training using </span>$key<span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">    </span>models[key] = DocumentCategorizerME.<span style="color:#9876aa;font-style:italic;">train</span>(<span style="color:#6a8759;">'en'</span>, sampleStream, trainingParams, <span style="color:#cc7832;">new </span>DoccatFactory())<br><span style="font-weight:bold;">}<br></span></pre><p>Now we run sentiment predictions on our sample sentences using both variants:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>w = sentences*.size().max()<br><br>variants.each <span style="font-weight:bold;">{ </span>key, params <span style="font-weight:bold;">-&gt;<br></span><span style="font-weight:bold;">    </span><span style="color:#cc7832;">def </span>categorizer = <span style="color:#cc7832;">new </span>DocumentCategorizerME(models[key])<br>    println <span style="color:#6a8759;">"</span><span style="color:#cc7832;">\n</span><span style="color:#6a8759;">Analyzing using </span>$key<span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">    </span>sentences.each <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">        </span><span style="color:#cc7832;">def </span>result = categorizer.categorize(it.split(<span style="color:#6a8759;">'</span><span style="color:#6a8759;background-color:#364135;">[ !]</span><span style="color:#6a8759;">'</span>))<br>        <span style="color:#cc7832;">def </span>category = categorizer.getBestCategory(result)<br>        <span style="color:#cc7832;">def </span>prob = sprintf <span style="color:#6a8759;">'%4.2f'</span>, result[categorizer.getIndex(category)]<br>        println <span style="color:#6a8759;">"</span>$<span style="font-weight:bold;">{</span>it.padRight(w)<span style="font-weight:bold;">} </span>$category<span style="color:#6a8759;"> (</span>$prob<span style="color:#6a8759;">)}"<br></span><span style="color:#6a8759;">    </span><span style="font-weight:bold;">}<br></span><span style="font-weight:bold;">}<br></span></pre><p>When we run this we get:</p>
<pre>Training using Maxent ...done.
...

Training using NaiveBayes ...done.
...

Analyzing using Maxent
OpenNLP is fantastic! positive (0.64)}
Groovy is great fun!  positive (0.74)}
Math can be hard!     negative (0.61)}

Analyzing using NaiveBayes
OpenNLP is fantastic! positive (0.72)}
Groovy is great fun!  positive (0.81)}
Math can be hard!     negative (0.72)}
</pre>
<p>The models here appear to have lower probability levels compared to the model we trained for Datumbox. We could try tweaking the training parameters further if this was a problem. We'd probably also need a bigger testing set to convince ourselves of the relative merits of each model. Some models can be over-trained on small datasets and perform very well with data similar to their training datasets but perform much worse for other data.</p>

<h3>Universal Sentence Encoding</h3>

<p>This example is inspired from the <a href="https://github.com/deepjavalibrary/djl/blob/master/examples/src/main/java/ai/djl/examples/inference/UniversalSentenceEncoder.java" target="_blank">UniversalSentenceEncoder</a> example in the <a href="https://github.com/deepjavalibrary/djl/tree/master/examples" target="_blank">DJL examples module</a>. It looks at using the universal sentence encoder model from <a href="https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects" target="_blank">TensorFlow Hub</a> via the <a href="https://djl.ai/" target="_blank">DeepJavaLibrary</a> (DJL) api.</p><p>First we define a translator. The <code>Translator</code> interface allow us to specify pre and post processing functionality.</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">class </span>MyTranslator <span style="color:#cc7832;">implements </span>NoBatchifyTranslator&lt;String[], <span style="color:#cc7832;">double</span>[][]&gt; {<br>    <span style="color:#bbb529;">@Override<br></span><span style="color:#bbb529;">    </span>NDList processInput(TranslatorContext ctx, String[] raw) {<br>        <span style="color:#cc7832;">var </span>factory = ctx.<span style="color:#9876aa;">NDManager<br></span><span style="color:#9876aa;">        </span><span style="color:#cc7832;">var </span>inputs = <span style="color:#cc7832;">new </span>NDList(raw.collect(factory::create))<br>        <span style="color:#cc7832;">new </span>NDList(NDArrays.<span style="color:#9876aa;font-style:italic;">stack</span>(inputs))<br>    }<br><br>    <span style="color:#bbb529;">@Override<br></span><span style="color:#bbb529;">    </span><span style="color:#cc7832;">double</span>[][] processOutput(TranslatorContext ctx, NDList list) {<br>        <span style="color:#cc7832;">long </span>numOutputs = list.singletonOrThrow().<span style="color:#9876aa;">shape</span>.get(<span style="color:#6897bb;">0</span>)<br>        NDList result = <span style="color:#e8bf6a;font-weight:bold;">[]<br></span><span style="color:#e8bf6a;font-weight:bold;">        </span><span style="color:#cc7832;">for </span>(i <span style="color:#cc7832;">in </span><span style="color:#6897bb;">0</span>..&lt;numOutputs) {<br>            result &lt;&lt; list.singletonOrThrow().get(i)<br>        }<br>        result*.toFloatArray() <span style="color:#cc7832;">as double</span>[][]<br>    }<br>}</pre><p>Here, we manually pack our input sentences into the required n-dimensional data types, and extract our output calculations into a 2D double array.</p><p>Next, we create our <code>predict</code> method by first defining the criteria for our prediction algorithm. We are going to use our translator, use the TensorFlow engine, use a predefined sentence encoder model from the TensorFlow Hub, and indicate that we are creating a text embedding application:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">def </span>predict(String[] inputs) {<br>    String modelUrl = <span style="color:#6a8759;">"https://storage.googleapis.com/tfhub-modules/google/universal-sentence-encoder/4.tar.gz"<br></span><span style="color:#6a8759;"><br></span><span style="color:#6a8759;">    </span>Criteria&lt;String[], <span style="color:#cc7832;">double</span>[][]&gt; criteria =<br>        Criteria.<span style="color:#9876aa;font-style:italic;">builder</span>()<br>            .optApplication(Application.NLP.<span style="color:#9876aa;font-style:italic;">TEXT_EMBEDDING</span>)<br>            .setTypes(String[], <span style="color:#cc7832;">double</span>[][])<br>            .optModelUrls(modelUrl)<br>            .optTranslator(<span style="color:#cc7832;">new </span>MyTranslator())<br>            .optEngine(<span style="color:#6a8759;">"TensorFlow"</span>)<br>            .optProgress(<span style="color:#cc7832;">new </span>ProgressBar())<br>            .build()<br>    <span style="color:#cc7832;">try </span>(<span style="color:#cc7832;">var </span>model = criteria.loadModel()<br>         <span style="color:#cc7832;">var </span>predictor = model.newPredictor()) {<br>        predictor.predict(inputs)<br>    }<br>}<br></pre><p>Next, let's define our input strings:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;">String[] inputs = [<br>    <span style="color:#6a8759;">"Cycling is low impact and great for cardio"</span>,<br>    <span style="color:#6a8759;">"Swimming is low impact and good for fitness"</span>,<br>    <span style="color:#6a8759;">"Palates is good for fitness and flexibility"</span>,<br>    <span style="color:#6a8759;">"Weights are good for strength and fitness"</span>,<br>    <span style="color:#6a8759;">"Orchids can be tricky to grow"</span>,<br>    <span style="color:#6a8759;">"Sunflowers are fun to grow"</span>,<br>    <span style="color:#6a8759;">"Radishes are easy to grow"</span>,<br>    <span style="color:#6a8759;">"The taste of radishes grows on you after a while"</span>,<br>]<br><span style="color:#cc7832;">var </span>k = inputs.size()</pre><p>Now, we'll use our predictor method to calculate the embeddings for each sentence. We'll print out the embeddings and also calculate the dot product of the embeddings. The dot product (the same as the inner product for this case) reveals how related the sentences are.</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">var </span>embeddings = predict(inputs)<br><br><span style="color:#cc7832;">var </span>z = <span style="color:#cc7832;">new double</span>[k][k]<br><span style="color:#cc7832;">for </span>(i <span style="color:#cc7832;">in </span><span style="color:#6897bb;">0</span>..&lt;k) {<br>    println <span style="color:#6a8759;">"Embedding for: </span>$<span style="font-weight:bold;">{</span>inputs[i]<span style="font-weight:bold;">}</span><span style="color:#cc7832;">\n</span>$<span style="font-weight:bold;">{</span>embeddings[i]<span style="font-weight:bold;">}</span><span style="color:#6a8759;">"<br></span><span style="color:#6a8759;">    </span><span style="color:#cc7832;">for </span>(j <span style="color:#cc7832;">in </span><span style="color:#6897bb;">0</span>..&lt;k) {<br>        z[i][j] = <span style="color:#9876aa;font-style:italic;">dot</span>(embeddings[i], embeddings[j])<br>    }<br>}<br></pre><p>Finally, we'll use the Heatmap class from Smile to present a nice display highlighting what the data reveals:</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'JetBrains Mono',monospace;font-size:9.6pt;"><span style="color:#cc7832;">new </span>Heatmap(inputs, inputs, z, Palette.<span style="color:#9876aa;font-style:italic;">heat</span>(<span style="color:#6897bb;">20</span>).reverse()).canvas().with <span style="font-weight:bold;">{<br></span><span style="font-weight:bold;">    </span><span style="color:#9876aa;">title </span>= <span style="color:#6a8759;">'Semantic textual similarity'<br></span><span style="color:#6a8759;">    </span>setAxisLabels(<span style="color:#6a8759;">''</span>, <span style="color:#6a8759;">''</span>)<br>    window()<br><span style="font-weight:bold;">}<br></span></pre><p>The output shows us the embeddings:</p>

<pre>Loading:     100% |========================================|
<span style="color:#D02020;">2022-08-07 17:10:43.212697: ... This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2
...
2022-08-07 17:10:52.589396: ... SavedModel load for tags { serve }; Status: success: OK...
...</span>
Embedding for: Cycling is low impact and great for cardio
[-0.02865048497915268, 0.02069241739809513, 0.010843578726053238, -0.04450441896915436, ...]
...
Embedding for: The taste of radishes grows on you after a while
[0.015841705724596977, -0.03129228577017784, 0.01183396577835083, 0.022753292694687843, ...]
</pre>

<p>The embeddings are an indication of similarity. Two sentences with similar meaning typically have similar embeddings.</p><p>The displayed graphic is shown below:</p><p><img src="https://blogs.apache.org/groovy/mediaresource/812f4232-0334-4720-9408-9582489a93b4" style="width:100%;" alt="2022-08-06 22_18_05-Smile Plot 1.png"><br></p><p>This graphic shows that our first four sentences are somewhat related, as are the last four sentences, but that there is minimal relationship between those two groups.</p>

<h3>More information</h3>

<p>Further examples can be found in the related repos:</p><p><a href="https://github.com/paulk-asert/groovy-data-science/blob/master/subprojects/LanguageProcessing" target="_blank">https://github.com/paulk-asert/groovy-data-science/blob/master/subprojects/LanguageProcessing</a></p><p><a href="https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingSparkNLP" target="_blank">https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingSparkNLP</a><a href="https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingSparkNLP" target="_blank"></a></p><p><a href="https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingDjl" target="_blank">https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingDjl</a><a href="https://github.com/paulk-asert/groovy-data-science/tree/master/subprojects/LanguageProcessingDjl" target="_blank"></a></p><p><span style="color: inherit; font-family: inherit; font-size: 24px;">Conclusion</span><br></p>

<p>We have look at a range of NLP examples using various NLP libraries. Hopefully you can see some cases where you could use additional NLP technologies in some of your own applications.</p><p><br></p>
