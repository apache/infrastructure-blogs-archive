---
layout: post
title: Apache Ignite 2.3 - More SQL and Persistence Capabilities
date: '2017-11-01T21:12:11+00:00'
categories: ignite
---
Putting aside the regular bug fixes and performance optimizations, the Apache Ignite 2.3 release brings new SQL capabilities and Ignite persistence improvements that are worth mentioning. 

<h3>SQL</h3>

Let's start with SQL first.

Apache Ignite users have consistently told us that despite all of Ignite’s SQL capabilities, it’s been at times challenging trying to figure out how to start using Ignite as an SQL database. 

This was mostly caused by scattered documentation pages, lack of “getting started” guides and tutorials. We’ve remedied this oversight! All related SQL knowledge has been curated in a <a href="https://apacheignite-sql.readme.io/docs" target="_blank">single documentation domain</a>.

Are you curious about the SQL scope? Go to the new <a href="https://apacheignite-sql.readme.io/docs/sql-reference-overview" target="_blank">SQL Reference Overview</a> section!

Cannot wait to learn how the Ignite SQL engine runs internally? We’ve prepared an <a href="https://apacheignite-sql.readme.io/docs/how-ignite-sql-works" target="_blank">Architectural Overview</a> section for you. 

Simply need to know how to connect to an Ignite cluster from an SQL tool? Here is a <a href="https://apacheignite-sql.readme.io/docs/how-ignite-sql-works" target="_blank">tooling</a> section for you.     

Let’s take a look at some specific SQL features released in Ignite 2.3. 

First, we’re proud to deliver support of <a href="https://apacheignite-sql.readme.io/docs/alter-table" target="_blank">ALTER TABLE</a> command. Presently, the command allows adding new columns to an SQL schema in runtime -- avoiding any cluster restarts. Once a new column is added, it can be turned into an index. Again, in runtime. No restarts!

Another significant addition seen in Ignite 2.3 is the integration with <a href="https://apacheignite-sql.readme.io/docs/sqlline" target="_blank">SQLLine tool</a> that is bundled with every Apache Ignite release and can be used as a default command line tool for SQL based interactions. 

To prove that it's fairly simple to work with Ignite as with an SQL database using the tool, we recorded a short screencast for you:
 
<a href="https://youtu.be/FKS8A86h-VY" target="_blank"><img src="https://blogs.apache.org/ignite/mediaresource/89364a0d-3c7e-427c-8237-868318dcd6f1" alt="screencast.png" style="display: block; margin: auto; width: 50%;"/></a>  
 
<h3>Ignite Persistence</h3>
 
Ignite native persistence keeps getting more attention and installs -- which is why the community released a feature requested by at least a dozen users. The feature allows enabling the persistence for specific data sets. Before Ignite version 2.3, the persistence could be enabled globally only.

Now, it's up to you to decide which data to persist and which to store in RAM only. The persistence can be configured via <a href="https://apacheignite.readme.io/docs/memory-configuration#section-data-regions" target="_blank">data regions</a> as shown below:
 
<a href="https://apacheignite.readme.io/docs/memory-configuration#section-data-regions" target="_blank"><img src="https://blogs.apache.org/ignite/mediaresource/0c7ce964-1218-49eb-bc9b-54a4725cabed" alt="persistence_cfg.png" style="display: block; margin: auto; width: 60%;"/></a>

This data region will consume up to 500 MB of RAM and will store a superset of data on disk ensuring that no data loss happens in case of a crash or even if there is no more space left in RAM.

<h3>Anything else?</h2> 

Flip through <a href="https://ignite.apache.org/releases/2.3.0/release_notes.html">our release notes</a> to see all the changes and improvements available in Apache Ignite 2.3 -- and, for sure, download and use this version in production. 

Questions, comments? Let us know!
