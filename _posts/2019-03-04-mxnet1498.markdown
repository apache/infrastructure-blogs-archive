---
layout: post
title: Apache MXNet 1.4 is available!
date: '2019-03-04T21:19:58+00:00'
categories: mxnet
---
<h1><a id="Apache_MXNet_14_is_available_0"></a>Apache MXNet 1.4 is available!</h1>

<p>Today the Apache MXNet community is excited to announce the 1.4.0 release of the Apache MXNet deep learning framework. We would like to thank the Apache MXNet community for all their contributions towards this power packed v1.4 release.</p>
<p>This release brings Java bindings for inference, Julia bindings, experimental control flow operators, JVM memory management, graph optimization and quantizations, and many more features and under-the-hood performance enhancements and usability improvements. Check out the full release highlights on <a href="https://github.com/apache/incubator-mxnet/releases/tag/1.4.0">MXNet v1.4 release notes</a>.</p>
<p><img src="https://cdn-images-1.medium.com/max/300/1*rKZEfsoyvreuyQZKzubF5A.png" alt="mxnet-v-1-4-0.png" height=100 width=100></p>
<h3><a id="Java_Inference_APIs_10"></a>Java Inference APIs</h3>
<p>This release includes new Java Inference APIs which offer easy to use, idiomatic high level APIs for performing predictions in Java with deep learning models trained using MXNet. This simplifies production deployment of Apache MXNet models for enterprise systems that run on Java. More details are available in <a href="https://medium.com/apache-mxnet/introducing-java-apis-for-deep-learning-inference-with-apache-mxnet-8406a698fa5a">this blog post</a> which introduces how to use the new Java Inference APIs.</p>
<h3><a id="Julia_API_14"></a>Julia API</h3>
<p>The <a href="https://github.com/apache/incubator-mxnet/tree/master/julia">Julia package</a> brings flexible and efficient GPU computing and state-of-the-art deep learning to Julia. Some highlights of the Julia package include efficient tensor computation across multiple devices including multiple CPUs, GPUs and distributed server nodes.</p>
<h3><a id="Control_Flow_Operators_experimental_18"></a>Control Flow Operators (experimental)</h3>
<p>With the control flow operators variable dynamic neural network graphs can be turned into optimized static computation graphs. The optimized graph can greatly improve the speed for training and inference for dynamic models.
To learn more details about these operators, check out the <a href="https://mxnet.incubator.apache.org/versions/master/tutorials/control_flow/ControlFlowTutorial.html">Control Flow Operators tutorial</a>.</p>
<h3><a id="Automated_JVM_Memory_Management_23"></a>Automated JVM Memory Management</h3>
<p>As the name suggests, the memory management feature provides an automated way for managing native memory when using the JVM language bindings of MXNet. Developers now get a seamless memory management system for managing both CPU and GPU memory footprint without any degradation in performance. More details on how to use can be found in this <a href="https://github.com/apache/incubator-mxnet/blob/master/scala-package/memory-management.md">README file</a>.</p>
<h3><a id="MXNet_Horovod_Integration_25"></a>MXNet Horovod Integration</h3>
<p>
Apache MXNet now supports distributed training using Horovod framework. <a href="https://github.com/horovod/horovod">Horovod</a> is an open source distributed framework created at Uber. It leverages efficient inter-GPU communication to distribute and aggregate model parameters across multiple workers thus allowing efficient use of network bandwidth and scaling of training of deep learning models. To learn more about MXNet-Horovod integration, check out this <a href="https://eng.uber.com/horovod-pyspark-apache-mxnet-support/">blog</a>. </p>
<h3><a id="Subgraph_API_27"></a>Subgraph API</h3>
<p>Subgraph API empowers Apache MXNet to integrate different kinds of backend libraries such as TVM, MKLDNN, TensorRT, Intel nGraph and many more. Enhanced integration with different backend libraries provides MXNet with a significant performance boost, by optimizing the execution of graph by breaking it into smaller components. Check out <a href="https://cwiki.apache.org/confluence/display/MXNET/Unified+integration+with+external+backend+libraries">integrating with external backend libraries</a> to learn more.</p>
<h3><a id="MKLDNN _Graph_Optimization_and_Quantization_31"></a>MKLDNN : Graph Optimization and Quantization</h3>
<p>MKLDNN takes advantage of the MXNet Subgraph API to implement graph optimizations in the form of operator fusion for inference. Fusions such as Convolution + ReLU and Batch Normalization Folding, provide a great boost in the speeds for inference. <br>
Quantization allows the use of reduced precision (INT8), which reduces memory usage and improves inference time without a significant loss in accuracy. On models such as ResNet50, Inception-BN, MobileNet the observed accuracy loss was less than 0.5 %. More details on this project are available on the <a href="https://cwiki.apache.org/confluence/display/MXNET/MXNet+Graph+Optimization+and+Quantization+based+on+subgraph+and+MKL-DNN">MXNet Graph Optimization and Quantization page</a>.</p>
<h3><a id="Other_Maintenance_improvements _36"></a>Other Maintenance improvements :</h3>
<ol>
<li>The community fixed <a href="https://cwiki.apache.org/confluence/display/MXNET/Apache+MXNet+(incubating)+1.4.0+Release+Notes#ApacheMXNet(incubating)1.4.0ReleaseNotes-Bugfixes">81 bugs</a>, improving MXNet&#39;s stability and reliability.</li>
<li>The community also addressed over <a href="https://cwiki.apache.org/confluence/display/MXNET/Apache+MXNet+(incubating)+1.4.0+Release+Notes#ApacheMXNet(incubating)1.4.0ReleaseNotes-Documentation">55 documentation issues</a>, improving the user experience for using MXNet and earning trust of the users.</li>
</ol>
<h3><a id="Getting_started_with MXNet_41"></a>Getting started with MXNet</h3>
<p>Getting started with MXNet is simple, visit the <a href="https://mxnet.incubator.apache.org/versions/master/install/index.html?platform=Linux&language=Python&processor=CPU">install page</a> to get started. To learn more about MXNet Gluon interface and deep learning, you can follow our <a href="https://medium.com/apache-mxnet/mxnet-gluon-in-60-minutes-3d49eccaf266">60-minute crash course</a>, and then later complete this <a href="https://gluon.mxnet.io">comprehensive set of tutorials</a>, which covers everything from an introduction to deep learning to how to implement cutting-edge neural network models. You can check out other related <a href="https://mxnet.incubator.apache.org/versions/master/tutorials/index.html">MXNet tutorials</a>, <a href="https://medium.com/apache-mxnet">MXNet blog posts</a> and <a href="https://www.youtube.com/channel/UCQua2ZAkbr_Shsgfk1LCy6A">MXNet YouTube channel</a>.</p>
<p>Have fun with MXNet 1.4.0!</p>
<h3><a id="Acknowledgements_47"></a>Acknowledgements:</h3>
<p>We would like to thank everyone from the Apache MXNet community for their contributions to the 1.4.0 release.</p>
